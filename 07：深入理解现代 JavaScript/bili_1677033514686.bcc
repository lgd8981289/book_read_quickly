{"font_size":0.4,"font_color":"#FFFFFF","background_alpha":0.5,"background_color":"#9C27B0","Stroke":"none","body":[{"from":0.3,"to":2.46,"location":2,"content":"如果你是前端开发人员"},{"from":2.46,"to":7.96,"location":2,"content":"想要了解在过去几年中被添加到《javaScript》的新特性"},{"from":7.96,"to":11.68,"location":2,"content":"以及未来如何在语言不断发展的过程中"},{"from":11.68,"to":13.09,"location":2,"content":"掌握最新动向的话"},{"from":13.09,"to":15.88,"location":2,"content":"那么本书会非常的适合你"},{"from":16.76,"to":17.5,"location":2,"content":"hello"},{"from":17.5,"to":18.04,"location":2,"content":"大家好"},{"from":18.04,"to":19.03,"location":2,"content":"我是sunday"},{"from":19.03,"to":23.68,"location":2,"content":"今天啊咱们来看一本javascript的宝典啊"},{"from":23.68,"to":27.74,"location":2,"content":"叫做《深入理解现代javascript》"},{"from":27.74,"to":33.8,"location":2,"content":"副标题是《javascript新特性与编程的最佳实践》"},{"from":33.8,"to":36.68,"location":2,"content":"作者呢是 T J 克罗德"},{"from":37.14,"to":41.88,"location":2,"content":"javascript 最初只是网页上去编写一个"},{"from":41.88,"to":44.12,"location":2,"content":"简单交互的一个脚本语言"},{"from":44.26,"to":48.37,"location":2,"content":"自2009年12月ES5 发布之后"},{"from":48.37,"to":52.12,"location":2,"content":"javascript 才有了一个真正的广泛应用"},{"from":52.32,"to":53.88,"location":2,"content":"在最近几年之中"},{"from":53.88,"to":59.66,"location":2,"content":"javascript更是一直占据编程语言开发的一个榜首位置"},{"from":60.08,"to":61.92,"location":2,"content":"自2015年之后"},{"from":61.92,"to":65.04,"location":2,"content":"TC39 技术委员会开始保持"},{"from":65.04,"to":67.05,"location":2,"content":"每年一次的版本迭代"},{"from":67.05,"to":70.42,"location":2,"content":"为javascript注入了大量的全新特性"},{"from":70.48,"to":73.12,"location":2,"content":"有过开发经验的小伙伴应该可以感知到"},{"from":73.12,"to":74.17,"location":2,"content":"最近几年来"},{"from":74.17,"to":75.04,"location":2,"content":"ES6"},{"from":75.04,"to":75.79,"location":2,"content":"ES7"},{"from":75.79,"to":76.48,"location":2,"content":"ES8"},{"from":76.48,"to":81.99,"location":2,"content":"各种全新的 ECMAScript 的版本规范开始接踵而来"},{"from":81.99,"to":83.96,"location":2,"content":"让我们有些应接不暇"},{"from":84.28,"to":87.55,"location":2,"content":"每一个版本，都会带来大量的全新特性"},{"from":87.55,"to":92.91,"location":2,"content":"比如说 ESM Map Set 反射 代理"},{"from":92.91,"to":95.94,"location":2,"content":"迭代器 生成器 等等等等"},{"from":96.18,"to":97.74,"location":2,"content":"而这些新的特性"},{"from":97.74,"to":102.539,"location":2,"content":"都会成为面试或者工作中的一些高频的难点"},{"from":102.72,"to":105.51,"location":2,"content":"所以对于我们这些开发者来说"},{"from":105.51,"to":106.77,"location":2,"content":"这些全新特性"},{"from":106.77,"to":109.7,"location":2,"content":"就成了我们必须要掌握的一个内容"},{"from":109.92,"to":113.48,"location":2,"content":"那么下面就让我们一起拿出一个小时的时间"},{"from":113.48,"to":119.7,"location":2,"content":"跟随作者 T J 克罗德 一起来深入理解现代javascript吧"},{"from":121.7,"to":127.13,"location":2,"content":"整本书中其实一共分为了19个章节"},{"from":127.13,"to":127.61,"location":2,"content":""},{"from":127.61,"to":128.54,"location":2,"content":"章节比较多"},{"from":128.54,"to":131.39,"location":2,"content":"所以说我把这19个章节"},{"from":131.39,"to":133.86,"location":2,"content":"给拆分成了六个部分"},{"from":133.86,"to":135.48,"location":2,"content":"我们通过这六个部分"},{"from":135.48,"to":138.48,"location":2,"content":"来把整本书的一个脉络给捋清楚"},{"from":138.48,"to":140.3,"location":2,"content":"以方便我们后续的学习"},{"from":140.32,"to":144.04,"location":2,"content":"那么下面我们先看一下这六部分都有什么"},{"from":144.119,"to":147.18,"location":2,"content":"首先第一部分是我们的第一章的内容"},{"from":147.28,"to":151.6,"location":2,"content":"如果说我们想要去了解现代javascript的新特性"},{"from":151.6,"to":154.48,"location":2,"content":"那么首先我们就必须要先去搞清楚"},{"from":154.48,"to":155.98,"location":2,"content":"一些专业的名词"},{"from":156.06,"to":159.1,"location":2,"content":"比如说 TC39 是什么意思"},{"from":159.26,"to":163.85,"location":2,"content":"ES6 和 ES015 之间有什么样的关系"},{"from":163.85,"to":165.8,"location":2,"content":"把这些东西都搞明白之后"},{"from":165.8,"to":167.82,"location":2,"content":"才能方便我们后续的学习"},{"from":168.32,"to":171.78,"location":2,"content":"第二部分 是从第二章到第四章"},{"from":171.899,"to":173.459,"location":2,"content":"在这三章里面"},{"from":173.459,"to":178.84,"location":2,"content":"作者按照 变量、函数、类，这样以小到大的顺序"},{"from":178.84,"to":183.5,"location":2,"content":"一步一步的去讲解了自 ES6 之后的全新特性"},{"from":184.279,"to":187.839,"location":2,"content":"其中会有我们所熟悉的let和const"},{"from":187.839,"to":190.839,"location":2,"content":"也会有我们一些不太熟悉的概念"},{"from":190.839,"to":194.06,"location":2,"content":"比如说 TDZ rest参数"},{"from":194.06,"to":194.84,"location":2,"content":"类继承"},{"from":194.84,"to":197.399,"location":2,"content":"newTarget 等等等这些东西"},{"from":197.399,"to":199.079,"location":2,"content":"并且最重要的是"},{"from":199.079,"to":200.609,"location":2,"content":"从这一章开始"},{"from":200.609,"to":204.55,"location":2,"content":"他都会有了一个叫做<以旧换新>的环节"},{"from":204.55,"to":208.78,"location":2,"content":"这个环节他会告诉我们如何使用新的语法"},{"from":208.78,"to":211.68,"location":2,"content":"来去代替之前的旧语法"},{"from":212.179,"to":216.39,"location":2,"content":"第三部分是从第五章到第七章"},{"from":216.39,"to":217.71,"location":2,"content":"这三个章节"},{"from":217.71,"to":220.98,"location":2,"content":"主要讲解了对象相关的一些概念"},{"from":220.98,"to":222.92,"location":2,"content":"从对象的新特性开始"},{"from":222.92,"to":226.07,"location":2,"content":"讲到普通对象的不可迭代性"},{"from":226.07,"to":228.5,"location":2,"content":"依据迭代器讲到生成器"},{"from":228.5,"to":232.32,"location":2,"content":"最后呢又插入了对象结构的一个概念"},{"from":232.6,"to":235.48,"location":2,"content":"然后是第八章到第九章"},{"from":235.48,"to":237.28,"location":2,"content":"这是我们的第四部分"},{"from":238.02,"to":240.5,"location":2,"content":"这两个章节以异步为主"},{"from":240.5,"to":242.45,"location":2,"content":"通过 promise 作为切入点"},{"from":242.45,"to":243.86,"location":2,"content":"引出了异步函数"},{"from":243.86,"to":245.03,"location":2,"content":"异步迭代器"},{"from":245.03,"to":249.22,"location":2,"content":"异步生成器以及 for await of 这样的一些概念"},{"from":249.48,"to":253.8,"location":2,"content":"第五部分是从第十章到第14章"},{"from":253.8,"to":254.53,"location":2,"content":"比较多"},{"from":254.53,"to":258.43,"location":2,"content":"这几章主要以传统概念的新增为主"},{"from":258.43,"to":262.339,"location":2,"content":"比如说针对于传统字符串的拼接啊"},{"from":262.339,"to":264.32,"location":2,"content":"然后新增的模板字符串"},{"from":264.42,"to":269.7,"location":2,"content":"针对于传统数组新增的类型化数组"},{"from":269.7,"to":272.64,"location":2,"content":"针对于模块化新增的 ESM "},{"from":272.64,"to":274.3,"location":2,"content":"反射和代理"},{"from":274.3,"to":276.27,"location":2,"content":"然后 proxy reflect"},{"from":276.27,"to":277.68,"location":2,"content":"比如说 Map Set"},{"from":277.68,"to":277.95,"location":2,"content":"WeakMap"},{"from":278.19,"to":280.23,"location":2,"content":"WeakSet 等等等等"},{"from":280.23,"to":284.08,"location":2,"content":"很多的概念都是从第十章到第14章"},{"from":284.08,"to":285.36,"location":2,"content":"这里面去提到的"},{"from":285.539,"to":288.329,"location":2,"content":"然后第六部分也就是最后一部分"},{"from":288.329,"to":290.78,"location":2,"content":"是第15章到第19章"},{"from":290.92,"to":293.92,"location":2,"content":"这几个章节呢主要以零碎的概念为主"},{"from":293.92,"to":296.65,"location":2,"content":"比如说新的正则标志啊"},{"from":296.65,"to":297.97,"location":2,"content":"比如说共享内存"},{"from":297.97,"to":298.87,"location":2,"content":"Bigint "},{"from":298.87,"to":299.98,"location":2,"content":"取幂运算"},{"from":299.98,"to":301.81,"location":2,"content":"空值合并 等等等等"},{"from":301.81,"to":304.74,"location":2,"content":"这些知识点以及未来的展望"},{"from":304.74,"to":307.52,"location":2,"content":"等一些正在进行改进的特性"},{"from":307.58,"to":311.37,"location":2,"content":"这是我们整个的这本书里面的六部分"},{"from":311.37,"to":315.45,"location":2,"content":"那么把一个大体的脉络咱们说清楚之后呢"},{"from":315.45,"to":317.65,"location":2,"content":"接下来呢我们就先来看第一章"},{"from":317.65,"to":318.64,"location":2,"content":"也就是"},{"from":318.64,"to":322.92,"location":2,"content":"ES2015~2020及后续版本的新特性"},{"from":323.12,"to":324.44,"location":2,"content":"在这一章里面"},{"from":324.44,"to":326.36,"location":2,"content":"它主要包含了三块内容"},{"from":326.36,"to":330.32,"location":2,"content":"其目的是为了同步一些基本的概念和名词"},{"from":330.32,"to":332.42,"location":2,"content":"以方便我们后续的学习"},{"from":332.599,"to":334.279,"location":2,"content":"如果说大家比较细心的话"},{"from":334.279,"to":335.119,"location":2,"content":"应该可以注意到"},{"from":335.119,"to":337.579,"location":2,"content":"我们之前在前面的视频里面"},{"from":337.579,"to":340.56,"location":2,"content":"多次提到了一个东西叫做 TC39"},{"from":340.62,"to":343.3,"location":2,"content":"那么这个 TC39 指的是什么意思呢？"},{"from":344.16,"to":349.72,"location":2,"content":"所谓的 TC39 它指的是 TC39 技术委员会"},{"from":349.86,"to":356.37,"location":2,"content":"主要负责通用跨平台与供应商无关的编程语言"},{"from":356.37,"to":359.549,"location":2,"content":"ECMAScript 的标准化"},{"from":359.549,"to":364.86,"location":2,"content":"也就是说javascript的标准就是TC39委员会 去定制的"},{"from":365.24,"to":367.49,"location":2,"content":"而根据这个标准"},{"from":367.49,"to":369.35,"location":2,"content":"从2015年之后"},{"from":369.35,"to":372.72,"location":2,"content":"每1年都会有一个新的版本更新"},{"from":372.8,"to":376.22,"location":2,"content":"描述这些新的版本的方式主要有两种"},{"from":376.22,"to":378.7,"location":2,"content":"第一种叫做 ES+版本号 "},{"from":378.7,"to":380.35,"location":2,"content":"ES+版本号 "},{"from":380.35,"to":382.679,"location":2,"content":"第二种是 ES+年份"},{"from":382.679,"to":386.339,"location":2,"content":"那么这种版本号和年份之间有什么关系呢？"},{"from":386.339,"to":389.54,"location":2,"content":"我们来看一下所谓的 ES+版本号 "},{"from":389.54,"to":392.42,"location":2,"content":"就是我们常见的 ES5 ES6 ES7 "},{"from":392.42,"to":395.9,"location":2,"content":"而 ES+年份 是 ES2015"},{"from":395.9,"to":398.96,"location":2,"content":"ES2016 和 ES017"},{"from":399.18,"to":401.28,"location":2,"content":"很多小伙伴会把 ES6"},{"from":401.28,"to":404.76,"location":2,"content":"当作是2016年之后的新增特性"},{"from":404.76,"to":406.16,"location":2,"content":"其实这个是不对的"},{"from":406.84,"to":412.52,"location":2,"content":"所谓的ES6它所代表的是2015年之后"},{"from":412.52,"to":417.78,"location":2,"content":"2015年6月发布的ESMAScript的第六版"},{"from":417.94,"to":421.45,"location":2,"content":"如果说用这版本号来说叫做ES6"},{"from":421.45,"to":425.11,"location":2,"content":"如果用年份来说叫做ES2015 "},{"from":425.11,"to":426.22,"location":2,"content":"也就是说"},{"from":426.22,"to":429.84,"location":2,"content":"ES6和ES2015代表的是同一个意思"},{"from":429.86,"to":430.94,"location":2,"content":"那么同理"},{"from":430.94,"to":435.02,"location":2,"content":"ES7 代表的就是2016年发布的"},{"from":435.02,"to":438.13,"location":2,"content":"ECMAScript的第七版"},{"from":438.13,"to":439.15,"location":2,"content":"以此类推"},{"from":439.15,"to":442.64,"location":2,"content":"ES8对应ES2017等等等等"},{"from":442.68,"to":444.72,"location":2,"content":"但是这里呢有一个特殊的地方"},{"from":444.72,"to":446.76,"location":2,"content":"就是我们的 ES5"},{"from":446.76,"to":449.18,"location":2,"content":"我们在之前的时候说过"},{"from":449.18,"to":451.1,"location":2,"content":"TC39技术委员会"},{"from":451.1,"to":455.94,"location":2,"content":"他是从2009年发布的一个版本叫做ES5"},{"from":455.94,"to":458.25,"location":2,"content":"所以说现在的 ES5 统称为"},{"from":458.25,"to":461.18,"location":2,"content":"2015年之前所发布的特性"},{"from":461.24,"to":463.85,"location":2,"content":"这是通常情况下"},{"from":463.85,"to":469,"location":2,"content":"我们前端工程师对ES的一个称呼"},{"from":469.52,"to":471.56,"location":2,"content":"而对于TC39而言"},{"from":471.56,"to":474.89,"location":2,"content":"他在去制定新的 JavaScript 的标准的时候"},{"from":474.89,"to":477.06,"location":2,"content":"其实是有一个明确的流程的"},{"from":477.06,"to":479.48,"location":2,"content":"这个流程一共被分为五步"},{"from":479.48,"to":482.45,"location":2,"content":"这五步咱们现在没有必要详细去说"},{"from":482.45,"to":484.4,"location":2,"content":"但是大家需要知道的是"},{"from":484.4,"to":488.58,"location":2,"content":"整个标准的一个制作的流程是非常严格的"},{"from":488.58,"to":492.32,"location":2,"content":"并不是说TC39 拍脑袋就决定了的一个东西"},{"from":492.34,"to":495.64,"location":2,"content":"而同时这些流程对于我们开发者而言"},{"from":495.64,"to":497.5,"location":2,"content":"其实也是可以参与进去的"},{"from":497.5,"to":500.32,"location":2,"content":"如果大家想要参与到这些标准的制定之中"},{"from":500.32,"to":502.75,"location":2,"content":"那么可以看一下书中第一章里面"},{"from":502.75,"to":505.09,"location":2,"content":"关于标准制定流程的一个内容"},{"from":505.09,"to":506.96,"location":2,"content":"里面有详细的介绍"},{"from":507.08,"to":508.64,"location":2,"content":"对于TC39而言"},{"from":508.64,"to":510.14,"location":2,"content":"他们去制定标准的时候"},{"from":510.14,"to":512.06,"location":2,"content":"需要遵循一个核心的理念"},{"from":512.06,"to":514.28,"location":2,"content":"那就是别毁坏web（Dont‘t break the web）"},{"from":514.48,"to":516.4,"location":2,"content":"别毁坏web"},{"from":516.4,"to":518.32,"location":2,"content":"它的意思指的就是：新的语法"},{"from":518.32,"to":520.64,"location":2,"content":"必须要保证旧的一个兼容性"},{"from":520.94,"to":523.1,"location":2,"content":"而当新的语法被发布了之后呢"},{"from":523.1,"to":527.14,"location":2,"content":"一些浏览器可能没有办法及时的支持新语法"},{"from":527.14,"to":529.48,"location":2,"content":"所以说这个时候我们就需要用到一个东西"},{"from":529.48,"to":531.58,"location":2,"content":"这个东西大家应该都非常熟悉"},{"from":531.58,"to":533.7,"location":2,"content":"就是我们的 Babel"},{"from":533.7,"to":535.32,"location":2,"content":"Babel 可以把标准的新语法"},{"from":535.32,"to":539.39,"location":2,"content":"降级为浏览器所兼容的一个语法版本"},{"from":539.39,"to":543.05,"location":2,"content":"那么比如说现在我要把 ES6 里面的语法降级"},{"from":543.05,"to":546.18,"location":2,"content":"应用到 IE11 这个浏览器上面"},{"from":546.18,"to":549.819,"location":2,"content":"那么就可以按照以下六步来去进行执行"},{"from":550.3,"to":551.32,"location":2,"content":"这六步"},{"from":551.32,"to":554.71,"location":2,"content":"每一步我都给大家写上了对应的代码"},{"from":554.71,"to":557.73,"location":2,"content":"或或者是需要执行的一些指令"},{"from":557.73,"to":560.43,"location":2,"content":"同时大家要注意再去安装Babel"},{"from":560.43,"to":562.35,"location":2,"content":"或者说安装其他的插件的时候"},{"from":562.35,"to":564.49,"location":2,"content":"大家要关注一下我们的版本号"},{"from":564.49,"to":567.79,"location":2,"content":"书中他那没有提供版本号"},{"from":567.79,"to":569.95,"location":2,"content":"如果说我们直接安装最新版本"},{"from":569.95,"to":571.37,"location":2,"content":"那么可能会出现一些错误"},{"from":571.37,"to":573.63,"location":2,"content":"这个大家是需要注意的"},{"from":573.63,"to":575.43,"location":2,"content":"这里面所涉及到的六部代码"},{"from":575.43,"to":577.56,"location":2,"content":"我不会给大家进行详细的解释"},{"from":577.56,"to":579.27,"location":2,"content":"如果说对这一块感兴趣"},{"from":579.27,"to":584.4,"location":2,"content":"可以可以从我们的github上拿到咱们的脑图或github"},{"from":584.4,"to":587.13,"location":2,"content":"里面呢也有咱们的源代码"},{"from":587.13,"to":590.68,"location":2,"content":"大家可以根据这个东西来去自己进行一个实验"},{"from":590.68,"to":592.459,"location":2,"content":"好吧"},{"from":593.12,"to":595.72,"location":2,"content":"那么第一章咱们说完之后呢"},{"from":595.72,"to":597.46,"location":2,"content":"接下来呢就是我们的第二块"},{"from":597.46,"to":600.01,"location":2,"content":"也就是关于我们的块级作用域的声明"},{"from":600.01,"to":601.38,"location":2,"content":"let和const"},{"from":601.4,"to":606.329,"location":2,"content":"let const是ES6之后新增的声明变量的方式"},{"from":606.329,"to":609.629,"location":2,"content":"这两个关键字虽然算是ES6的新特性"},{"from":609.629,"to":612.569,"location":2,"content":"但是我相信对于大多数的小伙伴而言"},{"from":612.569,"to":615.54,"location":2,"content":"它们其实都已经不再是一个新鲜的东西了"},{"from":615.7,"to":616.99,"location":2,"content":"在实际开发中"},{"from":616.99,"to":619.53,"location":2,"content":"我们早已经对他们有了大量的一个使用"},{"from":619.53,"to":621.87,"location":2,"content":"但是在很多情况下"},{"from":621.87,"to":624.09,"location":2,"content":"应用和掌握通常是两个概念"},{"from":624.09,"to":626.95,"location":2,"content":"那么下面呢我们就来看一看let和const"},{"from":626.95,"to":630.439,"location":2,"content":"看看它里面是否有大家的一些知识盲区"},{"from":630.5,"to":632.54,"location":2,"content":"对于现在的javascript而言"},{"from":632.54,"to":635.06,"location":2,"content":"声明变量的方式我们一般有三种"},{"from":635.06,"to":637.92,"location":2,"content":"var、 let和const"},{"from":637.92,"to":639.78,"location":2,"content":"通过var声明的变量"},{"from":639.78,"to":641.55,"location":2,"content":"它会跳出块级作用域"},{"from":641.55,"to":645.42,"location":2,"content":"而通过let声明的变量和通过const声明的常量"},{"from":645.42,"to":646.54,"location":2,"content":"则不会"},{"from":646.64,"to":648.98,"location":2,"content":"那么在这里面就会涉及到一个概念"},{"from":648.98,"to":650.79,"location":2,"content":"叫做块级作用域的概念"},{"from":650.79,"to":652.29,"location":2,"content":"所谓的块级作用域"},{"from":652.29,"to":655.41,"location":2,"content":"其实指的是两个大括号中间的内容"},{"from":655.41,"to":659.84,"location":2,"content":"比如说我这里通过 if 声明了一个块"},{"from":659.84,"to":661.64,"location":2,"content":"这里面有两个大括号"},{"from":661.64,"to":664.43,"location":2,"content":"这两个大括号中间的这一块内容"},{"from":664.43,"to":666.65,"location":2,"content":"就叫做一个块级作用域"},{"from":666.65,"to":669.05,"location":2,"content":"那么在这个块级作用域里面"},{"from":669.05,"to":671.64,"location":2,"content":"我通过var声明的变量"},{"from":671.64,"to":674.16,"location":2,"content":"块级作用域之外是可以访问的"},{"from":674.16,"to":677.819,"location":2,"content":"但是通过let和const声明的则不可以访问"},{"from":677.98,"to":679.42,"location":2,"content":"在我们日常开发中"},{"from":679.42,"to":681.22,"location":2,"content":"块级作用域是非常非常常见的"},{"from":681.22,"to":685.11,"location":2,"content":"比如说我们声明的函数判断以及for循环"},{"from":685.11,"to":688.06,"location":2,"content":"都会生成各自的块级作用域"},{"from":688.36,"to":690.52,"location":2,"content":"而除了块级作用域之外呢"},{"from":690.52,"to":694.12,"location":2,"content":"var和let和const在特性上也有一些区别"},{"from":694.12,"to":696.52,"location":2,"content":"这个区别主要体现在两点"},{"from":696.52,"to":698.08,"location":2,"content":"第一点叫做变量提升"},{"from":698.08,"to":700.39,"location":2,"content":"第二点叫做暂时性死区"},{"from":700.39,"to":702.02,"location":2,"content":"也就是 TDZ"},{"from":702.2,"to":704.54,"location":2,"content":"那么首先我们先来看变量提升"},{"from":704.54,"to":706.22,"location":2,"content":"对于var声明的变量"},{"from":706.22,"to":708.92,"location":2,"content":"它会具备一个变量提升的一个特性"},{"from":708.92,"to":711.92,"location":2,"content":"也就是我们可以先使用这个变量"},{"from":711.92,"to":714.21,"location":2,"content":"然后再去声明这个变量"},{"from":714.21,"to":715.92,"location":2,"content":"这样的话是不会报错的"},{"from":715.92,"to":719.06,"location":2,"content":"只不过打印出来的变量的值会是 undefined"},{"from":719.06,"to":721.76,"location":2,"content":"那么为什么打印出来的值会是 undefined 呢？"},{"from":721.76,"to":724.82,"location":2,"content":"我们来看一上面的这段代码"},{"from":724.82,"to":726.92,"location":2,"content":"可以被拆解成这样的一段代码"},{"from":726.92,"to":730.28,"location":2,"content":"也就是说因为var变量提升的特性"},{"from":730.28,"to":734.51,"location":2,"content":"所以说当前的这个变量会被放到打印之前"},{"from":734.51,"to":737.819,"location":2,"content":"先声明再打印再赋值"},{"from":737.88,"to":738.9,"location":2,"content":"那么这样的话"},{"from":738.9,"to":739.74,"location":2,"content":"大家就可以理解"},{"from":739.74,"to":741.72,"location":2,"content":"为什么我们这里的打印不会报错"},{"from":741.72,"to":744.959,"location":2,"content":"并且打印出来的值会是一个 undefined"},{"from":745.34,"to":748.52,"location":2,"content":"那么对于let和const而言"},{"from":748.52,"to":751.5,"location":2,"content":"他们是不具备变量提升的一个特性的"},{"from":751.5,"to":752.82,"location":2,"content":"不具备变量提升"},{"from":752.82,"to":753.75,"location":2,"content":"也就意味着"},{"from":753.75,"to":758.73,"location":2,"content":"如果我们去先打印后定义这个变量"},{"from":758.73,"to":760.99,"location":2,"content":"它则会给我们抛出来一个错误"},{"from":760.99,"to":765.579,"location":2,"content":"那么这个错误就被叫做暂时性死区（TDZ）"},{"from":766.48,"to":768.12,"location":2,"content":"在开头的时候我们说过"},{"from":768.12,"to":769.14,"location":2,"content":"从第二章开始"},{"from":769.14,"to":772.12,"location":2,"content":"咱们都会有一个旧习换新的环节"},{"from":772.12,"to":773.74,"location":2,"content":"那么这里的旧习换新"},{"from":773.74,"to":775.33,"location":2,"content":"其实主要包含两个方面"},{"from":775.33,"to":778.42,"location":2,"content":"第一个方面是不要使用 var"},{"from":778.42,"to":780.34,"location":2,"content":"改用let和const"},{"from":780.34,"to":783.04,"location":2,"content":"因为无论是跳出块级作用域也好"},{"from":783.04,"to":784.61,"location":2,"content":"还是变量提升也好"},{"from":784.61,"to":786.53,"location":2,"content":"在标准的"},{"from":786.53,"to":788.06,"location":2,"content":"图灵完备的编程语言中"},{"from":788.06,"to":791.18,"location":2,"content":"都不是一个应该具备的特性"},{"from":791.86,"to":794.61,"location":2,"content":"第二点叫做缩小变量的作用域"},{"from":794.61,"to":796.839,"location":2,"content":"从而提升可维护性"},{"from":796.86,"to":798.3,"location":2,"content":"想要理解这句话"},{"from":798.3,"to":800.55,"location":2,"content":"那么可能需要具备一定的编程经验"},{"from":800.55,"to":802.14,"location":2,"content":"如果大家不是很理解的话"},{"from":802.14,"to":803.28,"location":2,"content":"可以想象一下"},{"from":803.56,"to":807.91,"location":2,"content":"1万行代码的文件和一个100行代码的文件"},{"from":807.91,"to":810.4,"location":2,"content":"对你而言哪一个更好维护啊"},{"from":810.64,"to":811.36,"location":2,"content":"对不对"},{"from":811.36,"to":815.599,"location":2,"content":"肯定是代码越少的文件越好维护对吧"},{"from":815.62,"to":818.2,"location":2,"content":"所以说呢我们需要始终谨记哈"},{"from":818.2,"to":820.36,"location":2,"content":"代码越少越容易维护"},{"from":820.36,"to":823.359,"location":2,"content":"所以说缩小你的作用域空间"},{"from":823.359,"to":825.639,"location":2,"content":"减少逻辑的复杂度"},{"from":825.639,"to":828.78,"location":2,"content":"从而提升你代码的可维护性"},{"from":829.8,"to":831.92,"location":2,"content":"那么接下来我们来看第三章"},{"from":831.92,"to":833,"location":2,"content":"也就是函数"},{"from":833.04,"to":836.37,"location":2,"content":"函数呢作为javascript世界的一等公民"},{"from":836.37,"to":839.16,"location":2,"content":"在我们实际项目的开发之中"},{"from":839.16,"to":842,"location":2,"content":"是无时无刻不在使用的一个东西"},{"from":842,"to":843.44,"location":2,"content":"那么在这一章之中"},{"from":843.44,"to":845.71,"location":2,"content":"我们主要会从参数"},{"from":845.71,"to":846.28,"location":2,"content":"this指向"},{"from":846.28,"to":847.93,"location":2,"content":"构造函数"},{"from":847.93,"to":851.8,"location":2,"content":"这三个方面来去说明函数的一个新特性"},{"from":852.1,"to":854.5,"location":2,"content":"函数的参数会分为两种"},{"from":854.5,"to":855.58,"location":2,"content":"一种叫做形参"},{"from":855.58,"to":856.87,"location":2,"content":"一种叫做实参"},{"from":856.87,"to":857.89,"location":2,"content":"所谓形参"},{"from":857.89,"to":862.19,"location":2,"content":"指的是在去定义当前函数时的形式参数"},{"from":862.19,"to":865.49,"location":2,"content":"所谓实参指的是在去调义函数时"},{"from":865.49,"to":868.439,"location":2,"content":"调用我们的函数时传递的实际参数"},{"from":868.62,"to":870.84,"location":2,"content":"而在定义我们的形参的时候呢"},{"from":870.84,"to":873.09,"location":2,"content":"我们可以通过赋值符号"},{"from":873.09,"to":874.89,"location":2,"content":"也就是等号的形式"},{"from":874.89,"to":878.099,"location":2,"content":"为当前的形参去指定一个默认值"},{"from":878.2,"to":880,"location":2,"content":"当我们指定了默认值之后"},{"from":880,"to":881.98,"location":2,"content":"这意味着调用函数时"},{"from":881.98,"to":884.08,"location":2,"content":"如果没有传递实参"},{"from":884.08,"to":887.479,"location":2,"content":"则该行参具备默认值"},{"from":887.9,"to":890.54,"location":2,"content":"这个默认值哈（嘴瓢啦😂）"},{"from":890.54,"to":893.06,"location":2,"content":"它可以是一个变量"},{"from":893.06,"to":898,"location":2,"content":"也可以是一个单一的javascript表达式"},{"from":898,"to":899.98,"location":2,"content":"比如说我们可以在这里"},{"from":899.98,"to":902.8,"location":2,"content":"通过一个自执行的箭头函数"},{"from":902.8,"to":907.02,"location":2,"content":"来为当前的name指定一个默认值"},{"from":907.02,"to":910.32,"location":2,"content":"当前的自执行的箭头函数它会返回“李四”"},{"from":910.32,"to":914.28,"location":2,"content":"所以说name的结果就是当前表达式的结果，也就是李四"},{"from":914.28,"to":921.14,"location":2,"content":"在javascript里面的形参的就是函数的"},{"from":921.14,"to":924.93,"location":2,"content":"实参和形参并不一定是一一对应的"},{"from":924.93,"to":928.95,"location":2,"content":"也就是说函数可能会存在实参的数量"},{"from":928.95,"to":931.9,"location":2,"content":"超过形参数量的一个情况"},{"from":931.94,"to":933.59,"location":2,"content":"那么在这种情况下"},{"from":933.59,"to":936.68,"location":2,"content":"如果我们想要获取到多余的实参"},{"from":936.68,"to":938.62,"location":2,"content":"其实一共有两种方式"},{"from":938.88,"to":941.979,"location":2,"content":"第一种方式是利用传统的arguments"},{"from":942.02,"to":943.52,"location":2,"content":"通过arguments"},{"from":943.52,"to":948.2,"location":2,"content":"我们可以直接拿到当前普通函数里面的剩余参数"},{"from":949.38,"to":952.8,"location":2,"content":"通过arguments拿到的剩余参数是一个伪数组"},{"from":952.8,"to":954.03,"location":2,"content":"但是大家要注意"},{"from":954.03,"to":955.95,"location":2,"content":"arguments并不是通用的"},{"from":955.95,"to":960.26,"location":2,"content":"比如说他就没有办法在箭头函数下去进行使用"},{"from":960.72,"to":964.08,"location":2,"content":"而第二个叫做 rest参数"},{"from":964.08,"to":966.42,"location":2,"content":"ES6之后新增的 rest参数"},{"from":966.42,"to":967.5,"location":2,"content":"它是通用的"},{"from":967.5,"to":969.6,"location":2,"content":"它既可以在普通函数中使用"},{"from":969.6,"to":971.74,"location":2,"content":"也可以在箭头函数中使用"},{"from":971.96,"to":973.64,"location":2,"content":"想要使用 rest参数"},{"from":973.64,"to":976.49,"location":2,"content":"那么可以在函数形参的最后位置"},{"from":976.49,"to":979.72,"location":2,"content":"通过 ...变量名 的形式来去指定一个变量"},{"from":979.72,"to":984.699,"location":2,"content":"这表示当前的这个变量会接收所有剩余的实参"},{"from":986.04,"to":987.62,"location":2,"content":"那么对于函数而言"},{"from":987.62,"to":989.12,"location":2,"content":"还有一个非常重要的概念"},{"from":989.12,"to":990.66,"location":2,"content":"就是this指向"},{"from":990.76,"to":991.9,"location":2,"content":"this指向"},{"from":991.9,"to":995.62,"location":2,"content":"无论是在我们的开发中还是在面试中呢"},{"from":995.62,"to":997.7,"location":2,"content":"都是非常常见的一个问题"},{"from":997.7,"to":1000.34,"location":2,"content":"那么我们这里去介绍this指向的时候"},{"from":1000.34,"to":1002.959,"location":2,"content":"主要通过这三个方面来进行一个介绍"},{"from":1003.14,"to":1005.92,"location":2,"content":"那么首先我们先来看普通函数"},{"from":1006.12,"to":1007.98,"location":2,"content":"对于普通函数而言呢"},{"from":1007.98,"to":1010.75,"location":2,"content":"this它永远指向调用方"},{"from":1010.75,"to":1014.41,"location":2,"content":"比如说这里我们通过fn去直接调用了"},{"from":1014.41,"to":1015.37,"location":2,"content":"这样的一个函数"},{"from":1015.37,"to":1018.319,"location":2,"content":"那么 fn 它其实相当于window.fn"},{"from":1018.319,"to":1020.359,"location":2,"content":"所以说在当前这个函数里面"},{"from":1020.359,"to":1021.679,"location":2,"content":"this指向调用放"},{"from":1021.679,"to":1022.68,"location":2,"content":"也就是window"},{"from":1022.92,"to":1024.84,"location":2,"content":"而对于箭头函数而言"},{"from":1024.84,"to":1025.86,"location":2,"content":"大家需要记住的是"},{"from":1025.86,"to":1028.96,"location":2,"content":"箭头函数不会修改this指向"},{"from":1028.96,"to":1030.01,"location":2,"content":"也就是说"},{"from":1030.01,"to":1034.18,"location":2,"content":"它里面的这个this会永远沿用上层作用域"},{"from":1034.18,"to":1035.26,"location":2,"content":"里面的this"},{"from":1035.26,"to":1037.27,"location":2,"content":"那么这里的 subFn"},{"from":1037.27,"to":1040.859,"location":2,"content":"就会沿用 fn 里面的this的指向"},{"from":1041.22,"to":1046.27,"location":2,"content":"然后最后是 call、apply和bind 这三个函数"},{"from":1046.27,"to":1047.71,"location":2,"content":"这三个函数的作用"},{"from":1047.71,"to":1049.39,"location":2,"content":"它可以改变 this指向"},{"from":1049.39,"to":1052.73,"location":2,"content":"但是大家需要注意这三个方法"},{"from":1052.73,"to":1056.12,"location":2,"content":"只能修改普通函数中的this指向"},{"from":1056.12,"to":1059.72,"location":2,"content":"不能修改箭头函数中的this指向"},{"from":1059.72,"to":1062.16,"location":2,"content":"那么对于函数而言"},{"from":1062.16,"to":1064.44,"location":2,"content":"最后一块叫做构造函数"},{"from":1064.44,"to":1069.639,"location":2,"content":"构造函数通常指的是首字母大写的普通函数"},{"from":1069.639,"to":1071.229,"location":2,"content":"同样"},{"from":1071.229,"to":1076.76,"location":2,"content":"箭头函数永远不能作为构造函数去进行使用"},{"from":1077.8,"to":1078.66,"location":2,"content":"那么最后"},{"from":1078.66,"to":1082.45,"location":2,"content":"就是我们关于函数的一个旧习换新的环节"},{"from":1082.45,"to":1085.63,"location":2,"content":"那么在这个环节里面呢主要包含了三点"},{"from":1085.63,"to":1086.38,"location":2,"content":"首先"},{"from":1086.38,"to":1089.54,"location":2,"content":"关于箭头函数和普通函数的一个使用场景"},{"from":1089.54,"to":1093.14,"location":2,"content":"如果说大家不想去修改this指向的话"},{"from":1093.14,"to":1095.05,"location":2,"content":"那么可以使用箭头函数"},{"from":1095.05,"to":1098.23,"location":2,"content":"而如果说大家需要修改 this指向 的话"},{"from":1098.23,"to":1100.3,"location":2,"content":"那么需要使用普通函数"},{"from":1100.48,"to":1103.72,"location":2,"content":"其次呢是关于参数默认值的问题"},{"from":1106.58,"to":1109.94,"location":2,"content":"如果说大家想要给一个参数指定默认值的话"},{"from":1109.94,"to":1113.37,"location":2,"content":"那么大家需要使用参数默认值"},{"from":1113.37,"to":1116.58,"location":2,"content":"而不是说在当前的函数中"},{"from":1116.58,"to":1120.3,"location":2,"content":"通过代码为当前的参数去赋初始值"},{"from":1120.5,"to":1123.86,"location":2,"content":"第三个就是关于我们的 rest"},{"from":1123.86,"to":1125.08,"location":2,"content":"剩余参数的问题"},{"from":1125.08,"to":1128.32,"location":2,"content":"rest和arguments 都可以获取到剩余参数"},{"from":1128.32,"to":1132.24,"location":2,"content":"但是rest它的一个实用性更强"},{"from":1132.24,"to":1136.05,"location":2,"content":"所以说建议大家以后使用rest参数来代替"},{"from":1136.05,"to":1137.52,"location":2,"content":"marguments 关键字"},{"from":1138.64,"to":1140.28,"location":2,"content":"那么在第三章说完之后呢"},{"from":1140.28,"to":1143.06,"location":2,"content":"接下来呢我们就是来看一下类"},{"from":1143.96,"to":1145.42,"location":2,"content":"针对于类而言"},{"from":1145.42,"to":1149.08,"location":2,"content":"我们从一个问题开始"},{"from":1149.08,"to":1150.46,"location":2,"content":"什么问题呢？"},{"from":1151.46,"to":1153.14,"location":2,"content":"在前端开发里面"},{"from":1153.14,"to":1155.12,"location":2,"content":"其实一直流传着一句话"},{"from":1155.12,"to":1158.09,"location":2,"content":"那就是说 javascript中其实没有类"},{"from":1158.09,"to":1161.27,"location":2,"content":"我们只是在用原型来模拟类"},{"from":1161.27,"to":1163.72,"location":2,"content":"那么大家想一想是这个样子的吗？"},{"from":1164.58,"to":1166.44,"location":2,"content":"答案当然不是了"},{"from":1166.44,"to":1167.25,"location":2,"content":"对不对"},{"from":1167.25,"to":1170.7,"location":2,"content":"其实从 2015 就是 ES2015 开始"},{"from":1170.7,"to":1176.86,"location":2,"content":"ECMAScript 他就已经为javascript 提供了类的一个概念"},{"from":1176.94,"to":1179.79,"location":2,"content":"类并不是原型的模拟"},{"from":1179.79,"to":1184.919,"location":2,"content":"我们只是可以用原型来模拟出类的效果而已"},{"from":1185,"to":1187.1,"location":2,"content":"那么下面我们就来看一下 ES2015"},{"from":1187.1,"to":1189.28,"location":2,"content":"之后的一个类语法"},{"from":1189.9,"to":1193.53,"location":2,"content":"类语法的使用分为《类的创建》和《类的使用》两部分"},{"from":1193.53,"to":1196.47,"location":2,"content":"那么首先我们先来看类的创建"},{"from":1196.47,"to":1198.67,"location":2,"content":"类的创建里面的代码可能会有点多"},{"from":1198.67,"to":1200.7,"location":2,"content":"我们打开来看一下"},{"from":1200.72,"to":1201.86,"location":2,"content":"大家可以看到"},{"from":1201.86,"to":1205.25,"location":2,"content":"在这里面他这个代码其实稍微有一点点多"},{"from":1205.25,"to":1206.03,"location":2,"content":"对不对"},{"from":1206.03,"to":1208.72,"location":2,"content":"那我们把这个代码就给大家大致的说一下"},{"from":1209.16,"to":1210.78,"location":2,"content":"首先在这个代码里面"},{"from":1210.78,"to":1214.77,"location":2,"content":"我们通过class声明了一个类，类的首字母大写对吧"},{"from":1214.77,"to":1217.83,"location":2,"content":"然后在这个类之中包含了一个构造函数"},{"from":1217.83,"to":1220.639,"location":2,"content":"构造函数里面有三个数据属性"},{"from":1220.92,"to":1223.38,"location":2,"content":"然后我们通过get和set标记"},{"from":1223.38,"to":1227.68,"location":2,"content":"为当前的这个类创建了一个叫做访问器属性"},{"from":1227.72,"to":1230.39,"location":2,"content":"一旦给某一个方法"},{"from":1230.39,"to":1232.28,"location":2,"content":"使用了get或者set之后"},{"from":1232.28,"to":1235.95,"location":2,"content":"那么我们就可以通过属性的形式来"},{"from":1235.95,"to":1237.82,"location":2,"content":"直接调用这个方法"},{"from":1238.46,"to":1241,"location":2,"content":"然后再往下是一个原型方法"},{"from":1241,"to":1241.48,"location":2,"content":"toString"},{"from":1241.48,"to":1242.82,"location":2,"content":"我们进行了一个重写"},{"from":1242.82,"to":1244.83,"location":2,"content":"然后还有一个静态方法"},{"from":1244.83,"to":1247.32,"location":2,"content":"我们通过static描述了一个静态方法"},{"from":1247.32,"to":1250.31,"location":2,"content":"静态方法可以直接通过"},{"from":1250.31,"to":1252.47,"location":2,"content":"类.方法名 的形式来进行访问"},{"from":1253.67,"to":1256.28,"location":2,"content":"那么最后是一个动态方法名"},{"from":1256.32,"to":1257.34,"location":2,"content":"在类里面"},{"from":1257.34,"to":1259.62,"location":2,"content":"或者说在ES6之后"},{"from":1259.62,"to":1263.01,"location":2,"content":"我们可以通过中括号来指定一个变量"},{"from":1263.01,"to":1264.79,"location":2,"content":"作为方法的名字"},{"from":1264.79,"to":1268.06,"location":2,"content":"那比如说我现在的这个 fnName"},{"from":1268.06,"to":1271.66,"location":2,"content":"它的一个名字就是fn加上生成的随机值"},{"from":1271.66,"to":1273.34,"location":2,"content":"组成的一个方法的名字"},{"from":1273.74,"to":1276.74,"location":2,"content":"那么明确好了类创建的语法之后"},{"from":1276.74,"to":1278.46,"location":2,"content":"接下来我们来看类的使用"},{"from":1278.46,"to":1279.6,"location":2,"content":"想要使用类"},{"from":1279.6,"to":1282.84,"location":2,"content":"我们需要通过new关键字来new一个类"},{"from":1282.84,"to":1283.68,"location":2,"content":"new完之后"},{"from":1283.68,"to":1285.18,"location":2,"content":"我们可以得到一个对象对吧"},{"from":1285.18,"to":1286.49,"location":2,"content":"new一个对象出来"},{"from":1286.49,"to":1287.93,"location":2,"content":"然后针对这个对象"},{"from":1287.93,"to":1290.48,"location":2,"content":"我们可以有如下的使用方式"},{"from":1290.48,"to":1293.01,"location":2,"content":"那么这些代码呢"},{"from":1293.01,"to":1295.53,"location":2,"content":"因为它代码涉及的东西比较多"},{"from":1295.53,"to":1298.29,"location":2,"content":"所以说大家如果说之前没有接触过类的话"},{"from":1298.29,"to":1302.05,"location":2,"content":"我建议大家在这里最好把这个视频暂停一下"},{"from":1302.05,"to":1304.81,"location":2,"content":"然后把上面的文件代码大家写一下去"},{"from":1305.05,"to":1306.28,"location":2,"content":"自己去实现一下"},{"from":1306.28,"to":1308.659,"location":2,"content":"以加强对类的一个理解"},{"from":1308.659,"to":1310.249,"location":2,"content":"同样再给大家说一遍"},{"from":1310.249,"to":1312.679,"location":2,"content":"我们这里所有的代码和脑图"},{"from":1312.679,"to":1315.199,"location":2,"content":"都会在github上面去进行开源"},{"from":1315.199,"to":1317.71,"location":2,"content":"大家可以直接性的去上面进行获取就可以了"},{"from":1317.71,"to":1322.56,"location":2,"content":"那么再往下呢是我们的类继承"},{"from":1322.7,"to":1323.6,"location":2,"content":"继承呢"},{"from":1323.6,"to":1326.72,"location":2,"content":"在编程语言中是一个非常常见的一个概念"},{"from":1326.72,"to":1328.3,"location":2,"content":"在es 6之前"},{"from":1328.3,"to":1330.43,"location":2,"content":"如果说想要完成继承的话"},{"from":1330.43,"to":1334.379,"location":2,"content":"那么多数情况下需要使用原型继承的方式"},{"from":1334.48,"to":1337.27,"location":2,"content":"而原型继承有很多种"},{"from":1337.27,"to":1339.58,"location":2,"content":"比如说：组合式继承"},{"from":1339.88,"to":1341.89,"location":2,"content":"原型式继承"},{"from":1341.89,"to":1343.76,"location":2,"content":"寄生式继承"},{"from":1343.76,"to":1348.09,"location":2,"content":"寄生式组合继承、等等等很多种方式"},{"from":1348.09,"to":1350.28,"location":2,"content":"但是在实际开发之中"},{"from":1350.28,"to":1352.87,"location":2,"content":"如果我们直接使用类语法的话"},{"from":1352.87,"to":1356.11,"location":2,"content":"那么想要去实现继承就非常的容易了"},{"from":1356.11,"to":1358.39,"location":2,"content":"在这里只需要使用到一个关键字"},{"from":1358.39,"to":1360.37,"location":2,"content":"叫做 extends "},{"from":1360.37,"to":1361.18,"location":2,"content":"class SubColor"},{"from":1361.18,"to":1361.93,"location":2,"content":"extends Color"},{"from":1363.07,"to":1366.49,"location":2,"content":"这就表示当前的color有了一个子类"},{"from":1366.49,"to":1369.18,"location":2,"content":"也就说 SubColor 继承了我们的color"},{"from":1369.42,"to":1372,"location":2,"content":"那么有了类继承之后"},{"from":1372,"to":1374.1,"location":2,"content":"就会引出一个新的关键字"},{"from":1374.1,"to":1375.1,"location":2,"content":"叫做super"},{"from":1375.2,"to":1377.18,"location":2,"content":"而除了一个 extends"},{"from":1377.18,"to":1378.8,"location":2,"content":"还有另外一个关键字哈"},{"from":1379.88,"to":1381.22,"location":2,"content":"叫做exten"},{"from":1381.26,"to":1383.57,"location":2,"content":"而除了extense之外呢"},{"from":1383.57,"to":1384.98,"location":2,"content":"呃类继承的时候呢"},{"from":1384.98,"to":1388.43,"location":2,"content":"还会涉及到另外一个关键字叫做super super"},{"from":1388.43,"to":1389.03,"location":2,"content":"关键字啊"},{"from":1389.03,"to":1392.73,"location":2,"content":"可以用来处理与父类相关的一些事情"},{"from":1392.73,"to":1394.77,"location":2,"content":"它的使用场景呢主要有两个"},{"from":1394.77,"to":1396.96,"location":2,"content":"第一个呢就是去进行函数的调用"},{"from":1396.96,"to":1399.919,"location":2,"content":"第二个呢就是去进行属性的查询"},{"from":1399.94,"to":1402.389,"location":2,"content":"那我们先来看一下函数的调用"},{"from":1402.389,"to":1406.229,"location":2,"content":"最后关键字可以直接作为函数来去进行使用"},{"from":1406.229,"to":1409.48,"location":2,"content":"比如说在构造函数中去进行使用的时候"},{"from":1409.48,"to":1412.33,"location":2,"content":"我们就可以直接通过super来去触发"},{"from":1412.33,"to":1414.139,"location":2,"content":"父类的构造函数"},{"from":1414.18,"to":1416.61,"location":2,"content":"ok这通常情况下呢"},{"from":1416.61,"to":1418.62,"location":2,"content":"呃在子类的构造函数里面"},{"from":1418.62,"to":1420.84,"location":2,"content":"利用super触发父类的构造函数"},{"from":1420.84,"to":1423.58,"location":2,"content":"是一种非常常见的操作"},{"from":1423.94,"to":1425.02,"location":2,"content":"那么第二种呢"},{"from":1425.02,"to":1427.87,"location":2,"content":"就是作为属性查询的形式去进行使用"},{"from":1427.87,"to":1430.12,"location":2,"content":"那么比如说我们来看这段的代码"},{"from":1430.12,"to":1431.26,"location":2,"content":"在子类之中呢"},{"from":1431.26,"to":1434.389,"location":2,"content":"我们同样说明了一个静态方法叫做form cs s"},{"from":1434.389,"to":1435.829,"location":2,"content":"在这样的一个静态方法里面"},{"from":1435.829,"to":1439.909,"location":2,"content":"我们就可以通过super.form css的形式来"},{"from":1439.909,"to":1443.24,"location":2,"content":"直接调用父类中的静态方法"},{"from":1443.42,"to":1445.969,"location":2,"content":"ok啊那么通过这样的一种方式呢"},{"from":1445.969,"to":1448.099,"location":2,"content":"我们就相当于说在子类里面"},{"from":1448.099,"to":1451.41,"location":2,"content":"同样触发了父类的简单方法啊"},{"from":1451.41,"to":1455.63,"location":2,"content":"那么父类之中声明了ib r g b这样的一个色值"},{"from":1455.63,"to":1457.73,"location":2,"content":"在子类里面呢我新增了一个a"},{"from":1457.73,"to":1461.02,"location":2,"content":"那么就可以得到i g b a的一个设置"},{"from":1461.7,"to":1464,"location":2,"content":"ok那么明确好了我们的super之后"},{"from":1464,"to":1466.82,"location":2,"content":"接下来呢就是呃对于类而言的"},{"from":1466.82,"to":1469.28,"location":2,"content":"最后一个大家需要关注的概念"},{"from":1469.28,"to":1472.2,"location":2,"content":"就是neta get牛大概的属性呢"},{"from":1472.2,"to":1477.32,"location":2,"content":"它允许我们去检测函数或者构造方法"},{"from":1477.32,"to":1480.68,"location":2,"content":"是否是通过new运算符来被调用的"},{"from":1480.68,"to":1485.6,"location":2,"content":"并且呢它会返回一个指向构造方法或者函数"},{"from":1485.6,"to":1486.68,"location":2,"content":"的一个引用"},{"from":1487.38,"to":1491.03,"location":2,"content":"那么我们就可以利用new target来去判断"},{"from":1491.03,"to":1494.01,"location":2,"content":"当前触发构造函数的时候"},{"from":1494.01,"to":1496.74,"location":2,"content":"是通过哪个类来去进行触发的"},{"from":1496.74,"to":1499.56,"location":2,"content":"这在多层继承判断来源的时候呢"},{"from":1499.56,"to":1500.72,"location":2,"content":"会非常的有用"},{"from":1500.72,"to":1502.379,"location":2,"content":"那么比如说我们来看"},{"from":1502.38,"to":1503.94,"location":2,"content":"现在我们有一个父类"},{"from":1503.94,"to":1504.93,"location":2,"content":"有一个子类"},{"from":1504.93,"to":1508,"location":2,"content":"子类中通过super触发了父类的构造函数"},{"from":1508.22,"to":1511.64,"location":2,"content":"同时我们在父类之中通过new target"},{"from":1511.64,"to":1514.639,"location":2,"content":"点name的形式去进行了一个打印"},{"from":1514.88,"to":1515.96,"location":2,"content":"那么在下面呢"},{"from":1515.96,"to":1519.32,"location":2,"content":"我们分别通过new关键字构建了父类和子类"},{"from":1519.32,"to":1520.82,"location":2,"content":"在构建父类的时候"},{"from":1520.82,"to":1522.98,"location":2,"content":"new target会指向我们的父类"},{"from":1522.98,"to":1525,"location":2,"content":"在构建子类的时候"},{"from":1525,"to":1527.13,"location":2,"content":"虽然当前的这个打印"},{"from":1527.13,"to":1529.47,"location":2,"content":"依然是在父类中进行打印的"},{"from":1529.47,"to":1532.99,"location":2,"content":"但是因为我们是new的一个子类"},{"from":1532.99,"to":1537.53,"location":2,"content":"所以netk他依然会指向我们的子类"},{"from":1537.53,"to":1539.48,"location":2,"content":"也就是说我们就可以"},{"from":1539.48,"to":1543.489,"location":2,"content":"此时我们就可以通过new ti的来去判断"},{"from":1543.489,"to":1545.589,"location":2,"content":"当前触发构造函数时"},{"from":1545.589,"to":1548.96,"location":2,"content":"究竟是由哪个类来去进行触发的"},{"from":1549.8,"to":1553.57,"location":2,"content":"那么最后呢就是关于类的一个旧习换新的环节"},{"from":1553.57,"to":1555.88,"location":2,"content":"那么在这里呢其实就比较简单了哈"},{"from":1555.88,"to":1556.659,"location":2,"content":"只有一点"},{"from":1556.659,"to":1557.769,"location":2,"content":"在实际开发中"},{"from":1557.769,"to":1561.78,"location":2,"content":"我们应该通过class来完成类的构建研究集成"},{"from":1562.38,"to":1564.32,"location":2,"content":"ok那么明确好了类之后"},{"from":1564.32,"to":1567.44,"location":2,"content":"接下来呢就看一个大家非常关注的东西哈"},{"from":1567.44,"to":1568.95,"location":2,"content":"对象对吧"},{"from":1568.95,"to":1570.99,"location":2,"content":"对象呢在我们日常开发中"},{"from":1570.99,"to":1573.15,"location":2,"content":"使用的场景是非常多的"},{"from":1573.15,"to":1576.93,"location":2,"content":"所以说这一章中的很多新特性"},{"from":1576.93,"to":1580.11,"location":2,"content":"大家或多或少的应该都有一些了解才对"},{"from":1580.11,"to":1583.92,"location":2,"content":"我从中挑选了几个日常开发中最常用的语法"},{"from":1583.92,"to":1585.399,"location":2,"content":"来给大家进行一下分享"},{"from":1585.44,"to":1589.43,"location":2,"content":"那么首先第一个呢叫做可计算的属性名"},{"from":1589.43,"to":1590.84,"location":2,"content":"在前面的时候"},{"from":1590.84,"to":1593.93,"location":2,"content":"我们去构建类时其实已经用过了啊"},{"from":1593.93,"to":1595.37,"location":2,"content":"就是这个动态方法名"},{"from":1595.37,"to":1598.62,"location":2,"content":"就是我们这里所说的可计算的属性面"},{"from":1598.82,"to":1600.2,"location":2,"content":"在有些时候呢"},{"from":1600.2,"to":1604.65,"location":2,"content":"我们可能希望对象的一个key"},{"from":1604.65,"to":1608.1,"location":2,"content":"它是一个唯一且不确定的一个值"},{"from":1608.12,"to":1609.98,"location":2,"content":"什么叫做唯一且不确定呢"},{"from":1609.98,"to":1612.13,"location":2,"content":"我们举一个现实生活中的例子"},{"from":1612.13,"to":1615.7,"location":2,"content":"比如说世界上每一个人都是唯一的"},{"from":1615.7,"to":1616.6,"location":2,"content":"没错吧"},{"from":1616.6,"to":1620.159,"location":2,"content":"所以说proceed对象呢应该具备一个唯一的特性"},{"from":1620.26,"to":1622.9,"location":2,"content":"那么此时我们就可以利用这种方式"},{"from":1622.9,"to":1625.12,"location":2,"content":"通过symbol生成一个唯一指key"},{"from":1625.12,"to":1626.63,"location":2,"content":"然后利用中括号"},{"from":1626.63,"to":1631.46,"location":2,"content":"把这个生成的生成的这个唯一值作为这个k名"},{"from":1631.48,"to":1634.84,"location":2,"content":"ok那么此时我们得到的这个percent"},{"from":1634.84,"to":1637.84,"location":2,"content":"就会具备一个唯一的key啊"},{"from":1637.84,"to":1640.25,"location":2,"content":"也就是我们symbol得到的这个变量"},{"from":1640.25,"to":1643.55,"location":2,"content":"ok那么看完了可计算的属性名之后"},{"from":1643.55,"to":1645.76,"location":2,"content":"接下来我们来看属性的简写"},{"from":1645.76,"to":1647.98,"location":2,"content":"属性的简写呢是我们日常开发中"},{"from":1647.98,"to":1649.72,"location":2,"content":"非常常见的一种方式"},{"from":1649.72,"to":1655.2,"location":2,"content":"当属性的t和值去同样的一个变量名的时候"},{"from":1655.2,"to":1658.32,"location":2,"content":"那么此时我们可以通过简写的形式去进行"},{"from":1658.32,"to":1659.379,"location":2,"content":"一个省略"},{"from":1660.64,"to":1663.61,"location":2,"content":"那么再往后呢就是我们的展开运算符"},{"from":1663.61,"to":1667.72,"location":2,"content":"展开运算符以三个点的形式来进行表示"},{"from":1667.72,"to":1671.23,"location":2,"content":"可以应用在对象的展开合并"},{"from":1671.23,"to":1672.639,"location":2,"content":"或者说传参上面"},{"from":1672.639,"to":1674.859,"location":2,"content":"比如说我现在呢有一个数组"},{"from":1674.859,"to":1676.839,"location":2,"content":"那么我就可以通过点点点的形式呢"},{"from":1676.839,"to":1678.429,"location":2,"content":"把这个数组进行展开"},{"from":1678.429,"to":1680.63,"location":2,"content":"后面对应的是打印的结果"},{"from":1680.63,"to":1683.36,"location":2,"content":"同样我们也可以利用展开运算符"},{"from":1683.36,"to":1686.71,"location":2,"content":"把当前的数组和一个新数组去进行合并"},{"from":1686.71,"to":1690.26,"location":2,"content":"合并之后后面跟的是打印之后的结果"},{"from":1691.02,"to":1692.48,"location":2,"content":"那么除此之外呢"},{"from":1692.48,"to":1694.76,"location":2,"content":"对于es 6而言哈"},{"from":1694.76,"to":1698.72,"location":2,"content":"他也在object上面新增了很多的方法"},{"from":1698.72,"to":1700.52,"location":2,"content":"ok那么这些方法呢"},{"from":1700.52,"to":1702.71,"location":2,"content":"我们就不去一个一个的说了哈"},{"from":1702.71,"to":1703.82,"location":2,"content":"大家可以看一下"},{"from":1703.82,"to":1705.8,"location":2,"content":"如果说大家对哪个方法不熟悉"},{"from":1705.8,"to":1707.76,"location":2,"content":"并且对这个方法感兴趣的话"},{"from":1707.76,"to":1711,"location":2,"content":"那么可以通过mdn上去进行一个具体的查询"},{"from":1711.64,"to":1715.41,"location":2,"content":"那么最后就是对象的一个旧系换新的环节"},{"from":1715.41,"to":1717.18,"location":2,"content":"这里面的内容其实比较多"},{"from":1717.18,"to":1718.62,"location":2,"content":"一共有五个啊"},{"from":1718.62,"to":1719.58,"location":2,"content":"我们一个一个来看"},{"from":1719.58,"to":1724.14,"location":2,"content":"首先第一个就是当你需要一个动态的k的时候"},{"from":1724.14,"to":1727.41,"location":2,"content":"那么就可以利用新的可计算的属性名"},{"from":1727.41,"to":1729.639,"location":2,"content":"直接创建当前的这个对象"},{"from":1730.36,"to":1735.22,"location":2,"content":"第二个呢就是大家尽量多使用属性的简写"},{"from":1735.22,"to":1736.54,"location":2,"content":"那么通过这种方式"},{"from":1736.54,"to":1740.12,"location":2,"content":"可以简化我们当前对象构建的一个过程"},{"from":1740.24,"to":1744.99,"location":2,"content":"第三个呢是呃利用object的think方法"},{"from":1744.99,"to":1747.87,"location":2,"content":"这个方法呢其实是一个es 6新增的方法"},{"from":1747.87,"to":1750.58,"location":2,"content":"我们在上面呢其实也已经给大家列出来了"},{"from":1750.58,"to":1751.84,"location":2,"content":"这个方法的作用呢"},{"from":1751.84,"to":1754.42,"location":2,"content":"它可以将一个对象的可枚举属性"},{"from":1754.42,"to":1756.22,"location":2,"content":"复制到另外一个对象上"},{"from":1756.22,"to":1757.72,"location":2,"content":"但是需要大家注意的是"},{"from":1757.72,"to":1759.79,"location":2,"content":"这是一个浅拷贝的方法"},{"from":1759.79,"to":1762.57,"location":2,"content":"第四个是symbol"},{"from":1762.57,"to":1765.27,"location":2,"content":"symbol呢它可以去构建一个唯一值"},{"from":1765.27,"to":1767.7,"location":2,"content":"所以说大家可以利用森宝作为k名"},{"from":1767.7,"to":1770.84,"location":2,"content":"以避免出现属性名冲突的问题"},{"from":1770.98,"to":1774.1,"location":2,"content":"最后呢是关于实例的原型的"},{"from":1774.1,"to":1776.32,"location":2,"content":"之前我们访问实例原型的时候呢"},{"from":1776.32,"to":1780.08,"location":2,"content":"多是通过双下划线pro two的形式来进行访问"},{"from":1780.08,"to":1782.93,"location":2,"content":"那么现在es 6提供了两个新的方法"},{"from":1782.93,"to":1787.28,"location":2,"content":"object.set prototype of和object.get prototype of"},{"from":1787.32,"to":1792.32,"location":2,"content":"通过这两个方法可以直接控制那个实例的原型"},{"from":1795.65,"to":1797.159,"location":2,"content":"双下划线pro图"},{"from":1798.16,"to":1801.06,"location":2,"content":"那么明确好了我们的呃对象之后呢"},{"from":1801.06,"to":1803.93,"location":2,"content":"接下来呢我们来看新的一个章节哈"},{"from":1803.93,"to":1805.73,"location":2,"content":"从章节的名字里面就可以看出来"},{"from":1805.73,"to":1808.32,"location":2,"content":"这一章中呢其实主要讲了三个东西"},{"from":1808.32,"to":1809.73,"location":2,"content":"可迭代对象"},{"from":1809.73,"to":1811.919,"location":2,"content":"迭代器和生成器"},{"from":1812.1,"to":1814.8,"location":2,"content":"本章的内容呢在我们日常的业务开发中"},{"from":1814.8,"to":1816.24,"location":2,"content":"其实用的不是特别的多"},{"from":1816.24,"to":1817.62,"location":2,"content":"并且很多时候呢"},{"from":1817.62,"to":1820.72,"location":2,"content":"我们都有一些更加习惯的替代方案"},{"from":1820.76,"to":1822.5,"location":2,"content":"但是呢在面试的时候呢"},{"from":1822.5,"to":1824.3,"location":2,"content":"确实有可能经常会被问到"},{"from":1824.3,"to":1827.6,"location":2,"content":"所以说大家不妨听一听"},{"from":1828.3,"to":1832.59,"location":2,"content":"那么首先呢我们先来看可迭代对象和迭代器"},{"from":1832.59,"to":1834.75,"location":2,"content":"如果说大家想要了解这两个东西啊"},{"from":1834.75,"to":1836.37,"location":2,"content":"就需要先知道这两个东西"},{"from":1836.37,"to":1838.34,"location":2,"content":"分别代表的是什么意思"},{"from":1838.5,"to":1839.88,"location":2,"content":"所谓的迭代器"},{"from":1839.88,"to":1843.379,"location":2,"content":"指的是一个具有next方法的一个对象"},{"from":1843.38,"to":1847.67,"location":2,"content":"也就是说从理论上只要一个对象具备next的方法"},{"from":1847.67,"to":1849.37,"location":2,"content":"那么它就是迭代器"},{"from":1849.37,"to":1850.72,"location":2,"content":"这里大家要注意哈"},{"from":1850.72,"to":1853,"location":2,"content":"迭代器它可以应用在数组中"},{"from":1853,"to":1855.91,"location":2,"content":"却不可以应用在普通对象里面"},{"from":1855.91,"to":1858.83,"location":2,"content":"后面我们会也会进行说明"},{"from":1858.83,"to":1862.3,"location":2,"content":"ok那么第二个呢叫做可迭代对象"},{"from":1862.38,"to":1863.76,"location":2,"content":"可迭代对象呢"},{"from":1863.76,"to":1867.57,"location":2,"content":"它指的是可以通过标准方法获取迭代器"},{"from":1867.57,"to":1870.55,"location":2,"content":"以便利其内容的一个对象"},{"from":1870.55,"to":1875.29,"location":2,"content":"ok所以说呢可迭代器就是可迭代对象和迭代器"},{"from":1875.29,"to":1878.7,"location":2,"content":"通常情况下是需要配合去进行使用的"},{"from":1879.02,"to":1881.3,"location":2,"content":"ok那么对于迭代器而言"},{"from":1881.3,"to":1883.22,"location":2,"content":"它呢又会被细分为两种"},{"from":1883.22,"to":1885.2,"location":2,"content":"一种叫做影视的迭代器"},{"from":1885.2,"to":1886.32,"location":2,"content":"也就是full"},{"from":1886.32,"to":1888.36,"location":2,"content":"一种叫做显示的迭代器"},{"from":1888.36,"to":1890.2,"location":2,"content":"也就是simple.writer"},{"from":1890.2,"to":1893.08,"location":2,"content":"那么首先呢我们先来看这个影视的迭代器"},{"from":1893.08,"to":1895.4,"location":2,"content":"for引申的替代器呢"},{"from":1895.4,"to":1897.77,"location":2,"content":"拥有影视的next方法"},{"from":1897.77,"to":1900.47,"location":2,"content":"在这里呢我给大家列出来了呃"},{"from":1900.47,"to":1902.46,"location":2,"content":"数组和对象中的使用"},{"from":1902.46,"to":1903.96,"location":2,"content":"我们先来看数组"},{"from":1903.96,"to":1905.1,"location":2,"content":"在数组之中"},{"from":1905.1,"to":1908.16,"location":2,"content":"我们可以直接通过full of来取迭代"},{"from":1908.16,"to":1909.84,"location":2,"content":"我们的这个数组对吧"},{"from":1909.84,"to":1910.5,"location":2,"content":"迭代之后呢"},{"from":1910.5,"to":1911.78,"location":2,"content":"打印的内容如下"},{"from":1912.3,"to":1913.86,"location":2,"content":"而对于对象而言"},{"from":1913.86,"to":1914.92,"location":2,"content":"大家需要注意"},{"from":1914.92,"to":1919.54,"location":2,"content":"普通的对象是不可以使用迭代器的"},{"from":1919.54,"to":1922.52,"location":2,"content":"也就是说在当前的这个代码之中"},{"from":1922.96,"to":1924.94,"location":2,"content":"我们的普通对象percent"},{"from":1924.94,"to":1927.28,"location":2,"content":"如果通过for of去进行迭代的话"},{"from":1927.28,"to":1928.74,"location":2,"content":"那么会得到一个错误"},{"from":1929.58,"to":1931.88,"location":2,"content":"ok那么影视的迭代器看完之后呢"},{"from":1931.88,"to":1934.22,"location":2,"content":"接下来呢我们来看显示的迭代器"},{"from":1934.22,"to":1936.74,"location":2,"content":"在这个显示的迭代器之中呢"},{"from":1936.74,"to":1938.54,"location":2,"content":"每一个数组啊"},{"from":1938.54,"to":1940.27,"location":2,"content":"因为普通对象不可迭代嘛"},{"from":1940.27,"to":1944.05,"location":2,"content":"所以说每个数组呢都包含了一个叫做symbol"},{"from":1944.05,"to":1945.56,"location":2,"content":"点iterator的属性"},{"from":1945.56,"to":1949.97,"location":2,"content":"通过这个属性我们可以拿到一个迭代器"},{"from":1949.97,"to":1953.2,"location":2,"content":"我们把它叫做it这a的打印出来之后呢"},{"from":1953.2,"to":1955.54,"location":2,"content":"是一个rain的一个替代器"},{"from":1955.54,"to":1956.92,"location":2,"content":"然后利用这个对象"},{"from":1956.92,"to":1959.02,"location":2,"content":"它呢包含next的方法"},{"from":1959.02,"to":1960.88,"location":2,"content":"ok for of是影视的啊"},{"from":1960.88,"to":1962.65,"location":2,"content":"这个迭代器呢是显示的"},{"from":1962.65,"to":1966.43,"location":2,"content":"我们可以直接通过it.next这个显示的迭代方法"},{"from":1966.43,"to":1969.67,"location":2,"content":"来不断的对数组去进行迭代的操作"},{"from":1969.67,"to":1972.24,"location":2,"content":"ok打印的内容如下"},{"from":1973.2,"to":1974.9,"location":2,"content":"而对于对象而言呢"},{"from":1974.9,"to":1976.46,"location":2,"content":"就是普通对象来说哈"},{"from":1976.46,"to":1977.84,"location":2,"content":"普通对象我们刚才说了"},{"from":1977.84,"to":1980.13,"location":2,"content":"它默认情况下是不可以迭代的"},{"from":1980.13,"to":1981.75,"location":2,"content":"那么不可以理解的原因"},{"from":1981.75,"to":1983.61,"location":2,"content":"其实就是因为缺少了symbol点"},{"from":1983.61,"to":1985.24,"location":2,"content":"iterator这样的一个属性"},{"from":1985.3,"to":1990.73,"location":2,"content":"所以说如果我们希望让普通对象可以迭代的话"},{"from":1990.73,"to":1993.78,"location":2,"content":"那么可以通过以下两步来进行完成"},{"from":1993.84,"to":1996.49,"location":2,"content":"但是因为在实际开发之中"},{"from":1996.49,"to":1999.49,"location":2,"content":"非得要用迭代器来迭代对象的场景"},{"from":1999.49,"to":2000.56,"location":2,"content":"其实并不多见"},{"from":2000.56,"to":2003.44,"location":2,"content":"并且呢他这两部的代码呢也非常的复杂"},{"from":2003.44,"to":2006.44,"location":2,"content":"所以我们在视频之中就不给大家进行展示了"},{"from":2006.44,"to":2008.36,"location":2,"content":"感兴趣的同学可以自己去看一下"},{"from":2008.36,"to":2010.58,"location":2,"content":"书中去介绍内容"},{"from":2010.72,"to":2012.34,"location":2,"content":"那么迭代器说完之后呢"},{"from":2012.34,"to":2014.17,"location":2,"content":"接下来呢是生成器"},{"from":2014.17,"to":2017.2,"location":2,"content":"生成器其实代表的是一个函数啊"},{"from":2017.2,"to":2020.22,"location":2,"content":"所以说呢我们可以把它叫做生成器函数"},{"from":2020.36,"to":2022.16,"location":2,"content":"生成器和迭代器之间"},{"from":2022.16,"to":2025.19,"location":2,"content":"包含了非常严密的一个关系"},{"from":2025.19,"to":2025.76,"location":2,"content":"ok"},{"from":2025.76,"to":2028.4,"location":2,"content":"这也是为什么我们要把他们两个连起"},{"from":2028.4,"to":2029.76,"location":2,"content":"来说的一个原因"},{"from":2029.8,"to":2031.96,"location":2,"content":"那么在刚才我们知道了"},{"from":2031.96,"to":2034.48,"location":2,"content":"迭代器呢虽然是一个非常有用的工具"},{"from":2034.48,"to":2040.19,"location":2,"content":"但是由于我们要一直显示的去维护内部的状态"},{"from":2040.19,"to":2044.44,"location":2,"content":"因此迭代器的创建它一定是一个非常谨慎的"},{"from":2044.92,"to":2048.84,"location":2,"content":"而生成器呢它提供了一个更加强大的选择"},{"from":2048.98,"to":2053.3,"location":2,"content":"比如说它允许我们去定义一个"},{"from":2053.3,"to":2056.489,"location":2,"content":"包含了迭代算法的函数"},{"from":2056.489,"to":2062.1,"location":2,"content":"同时这个函数可以自动的去维护自己的状态"},{"from":2062.199,"to":2066.849,"location":2,"content":"所以呢我们就可以利用迭代器来历"},{"from":2066.849,"to":2071.9,"location":2,"content":"不利用生成器啊来得到一个迭代器的对象"},{"from":2072.239,"to":2075.539,"location":2,"content":"也就是说大家可以简单地理解为生成器"},{"from":2075.539,"to":2077.96,"location":2,"content":"可以生成一个迭代器"},{"from":2078.04,"to":2081.4,"location":2,"content":"ok那么生成的这个迭代器对象呢"},{"from":2081.4,"to":2083.11,"location":2,"content":"我们一般把它叫做generator"},{"from":2083.11,"to":2089.34,"location":2,"content":"这个generator符合可迭代协议和迭代器协议"},{"from":2089.34,"to":2091.56,"location":2,"content":"那么这就意味着只能预测之中"},{"from":2091.56,"to":2094.26,"location":2,"content":"一定包含了next的方法"},{"from":2094.379,"to":2099.209,"location":2,"content":"ok这是我们生成器和迭代器的之间的一个关系"},{"from":2099.209,"to":2100.979,"location":2,"content":"那么明确好了这个关系之后呢"},{"from":2100.979,"to":2103.52,"location":2,"content":"接下来呢我们就来看生成器的一个语法"},{"from":2103.64,"to":2107.87,"location":2,"content":"生成器的语法呢一共包含了分为了三部啊"},{"from":2107.87,"to":2111.68,"location":2,"content":"首先第一步呢我们需要去构建生成器函数"},{"from":2111.7,"to":2113.98,"location":2,"content":"想要构建生成器函数的话"},{"from":2113.98,"to":2117.78,"location":2,"content":"我们可以在function的后面加上一个星号分布式"},{"from":2117.78,"to":2118.56,"location":2,"content":"后面有了星号"},{"from":2118.56,"to":2122.24,"location":2,"content":"就标记着当前的这个函数是一个生成器函数"},{"from":2122.5,"to":2124.75,"location":2,"content":"那么在这个生成器函数里面呢"},{"from":2124.75,"to":2127.57,"location":2,"content":"我们可以使用u的这个关键字"},{"from":2127.57,"to":2131.39,"location":2,"content":"来去处理暂停迭代的这个功能"},{"from":2131.39,"to":2134.24,"location":2,"content":"这个暂停迭代是需要配合"},{"from":2134.24,"to":2136.86,"location":2,"content":"next的方法来进行使用的"},{"from":2137.2,"to":2141.659,"location":2,"content":"那么最后我们就可以直接调用这个生成器方法"},{"from":2141.659,"to":2143.789,"location":2,"content":"得到一个迭代器对象"},{"from":2143.789,"to":2147.78,"location":2,"content":"然后利用迭代器对象的next进行迭代的过程"},{"from":2147.96,"to":2150.62,"location":2,"content":"ok那么对于生成器而言呢"},{"from":2150.62,"to":2153.77,"location":2,"content":"它不光可以直接调用next方法"},{"from":2153.77,"to":2157.84,"location":2,"content":"它还可以利用nex的方法去传递一些参数"},{"from":2158.06,"to":2159.17,"location":2,"content":"传递参数"},{"from":2159.17,"to":2161.3,"location":2,"content":"我们把它叫做消费者"},{"from":2161.3,"to":2164.17,"location":2,"content":"那么下面我们来看一下这段代码呢"},{"from":2164.17,"to":2166.36,"location":2,"content":"同样哈有一点点多"},{"from":2166.36,"to":2168.49,"location":2,"content":"ok我们来去分析一下"},{"from":2168.49,"to":2172.38,"location":2,"content":"首先呢我们先来看a的这个生成器函数"},{"from":2172.38,"to":2173.73,"location":2,"content":"在这个函数里面呢"},{"from":2173.73,"to":2177.26,"location":2,"content":"我们通过u的呢去进行了两次暂停对吧"},{"from":2177.26,"to":2178.37,"location":2,"content":"第一次暂停的时候"},{"from":2178.37,"to":2180.47,"location":2,"content":"表叫做请输入第一次的值"},{"from":2180.47,"to":2182.75,"location":2,"content":"第二次呢叫做请输入第二次的值"},{"from":2182.75,"to":2184.34,"location":2,"content":"每次输入完成之后"},{"from":2184.34,"to":2187.68,"location":2,"content":"我们就都会把输入的值去进行一个打印"},{"from":2188.479,"to":2191.739,"location":2,"content":"那么接下来呢我们利我们去呃"},{"from":2191.739,"to":2194.199,"location":2,"content":"调用了这个生成器函数"},{"from":2194.199,"to":2195.57,"location":2,"content":"得到了一个迭代器"},{"from":2195.57,"to":2198.72,"location":2,"content":"然后迭代器点next对吧"},{"from":2198.72,"to":2201.83,"location":2,"content":"去进行了第一次的呃迭代"},{"from":2201.83,"to":2204.38,"location":2,"content":"ok然后在第二次迭代的时候呢"},{"from":2204.38,"to":2206.81,"location":2,"content":"我们去给它传入了一个参数35"},{"from":2206.81,"to":2209.36,"location":2,"content":"然后呃第三次迭代的时候呢"},{"from":2209.36,"to":2211.36,"location":2,"content":"我们给它传入了一个参数七"},{"from":2211.6,"to":2213.64,"location":2,"content":"那么依照这样的代码"},{"from":2213.64,"to":2218.119,"location":2,"content":"最终会打印出这样的一个结果"},{"from":2218.119,"to":2219.169,"location":2,"content":"给大家截个图"},{"from":2219.169,"to":2221.85,"location":2,"content":"大家可以对照着来去看一下"},{"from":2221.85,"to":2224.13,"location":2,"content":"这个代码呢可能大家在第一次去看的时候"},{"from":2224.13,"to":2226.05,"location":2,"content":"可能有点有些难以理解"},{"from":2226.05,"to":2227.75,"location":2,"content":"难以理解的原因是"},{"from":2227.75,"to":2231.56,"location":2,"content":"因为大家可能对生成器和迭代器并不是很熟悉"},{"from":2231.72,"to":2234.72,"location":2,"content":"那么此时呢大家就可以把这个视频暂停一下"},{"from":2234.72,"to":2235.98,"location":2,"content":"然后把我们的这个代码"},{"from":2235.98,"to":2238.29,"location":2,"content":"在自己的vs code那里去写一下"},{"from":2238.29,"to":2240.66,"location":2,"content":"看是不是可以得到对应的一个结果"},{"from":2240.66,"to":2242.13,"location":2,"content":"代码多写几遍"},{"from":2242.13,"to":2245.49,"location":2,"content":"大家就可以把生成器和迭代器的概念搞清楚了"},{"from":2245.49,"to":2246.36,"location":2,"content":"ok"},{"from":2248.459,"to":2251.899,"location":2,"content":"那么把生成器和迭代器说完之后呢"},{"from":2251.899,"to":2255.199,"location":2,"content":"咱们整个的这一章呢其实就说的差不多了"},{"from":2255.199,"to":2258.639,"location":2,"content":"就像我们在呃开始的时候所说的一样"},{"from":2258.639,"to":2261.219,"location":2,"content":"在实际的企业开发之中"},{"from":2261.219,"to":2263.63,"location":2,"content":"生成器与迭代器呢"},{"from":2263.63,"to":2266.92,"location":2,"content":"它的使用的使用率并不是特别的高"},{"from":2267.04,"to":2269.62,"location":2,"content":"所以说呢这里的旧机换新只有一个"},{"from":2269.62,"to":2272.68,"location":2,"content":"ok就是利用dom的可迭代特性"},{"from":2272.68,"to":2274.42,"location":2,"content":"通过for of进行循环"},{"from":2274.42,"to":2275.8,"location":2,"content":"这是什么意思呢"},{"from":2275.8,"to":2280.36,"location":2,"content":"我们知道当我们通过呃document"},{"from":2280.36,"to":2285.03,"location":2,"content":"点query select i去获取的获取多个盗墓之后"},{"from":2285.03,"to":2287.01,"location":2,"content":"其实拿到的是一个伪数组"},{"from":2287.01,"to":2288.09,"location":2,"content":"没错吧"},{"from":2288.09,"to":2291.12,"location":2,"content":"而伪数组呢默认是不可以通过for each"},{"from":2291.12,"to":2292.54,"location":2,"content":"去进行循环的"},{"from":2292.54,"to":2295.16,"location":2,"content":"但是它可以迭代"},{"from":2295.319,"to":2299.399,"location":2,"content":"也就是说我们可以利用影视的迭代器for of来"},{"from":2299.399,"to":2303.37,"location":2,"content":"直接去别代伪数组"},{"from":2303.37,"to":2304.63,"location":2,"content":"ok啊"},{"from":2304.63,"to":2307.69,"location":2,"content":"这是我们这一块的一个呃旧曲换新啊"},{"from":2307.69,"to":2309.82,"location":2,"content":"希望可以帮助到大家好吧"},{"from":2309.82,"to":2311.83,"location":2,"content":"那么接下来呢是第七章啊"},{"from":2311.83,"to":2313.6,"location":2,"content":"结构呃"},{"from":2313.6,"to":2315.52,"location":2,"content":"关于对象的最后一个部分啊"},{"from":2315.52,"to":2317.29,"location":2,"content":"其实就是结构这一块了"},{"from":2317.29,"to":2317.98,"location":2,"content":"结构呢"},{"from":2317.98,"to":2320.83,"location":2,"content":"它是我们日常开发中非常常用的一个语法"},{"from":2320.83,"to":2324.4,"location":2,"content":"其目的呢是从数据结构中"},{"from":2324.4,"to":2326.9,"location":2,"content":"快速地提取到对应的一个内容"},{"from":2327.16,"to":2328.78,"location":2,"content":"结构分为两部分"},{"from":2328.78,"to":2330.52,"location":2,"content":"第一部分呢叫做对象结构"},{"from":2330.52,"to":2333.28,"location":2,"content":"第二部分呢叫做数组结构"},{"from":2333.759,"to":2336.159,"location":2,"content":"当对对象去进行结构的时候呢"},{"from":2336.159,"to":2339.99,"location":2,"content":"那么需要配合大括号来去完成这件事情"},{"from":2339.99,"to":2341.79,"location":2,"content":"以k的形式啊"},{"from":2341.79,"to":2343.35,"location":2,"content":"就在大括号中间啊"},{"from":2343.35,"to":2348.079,"location":2,"content":"以k的形式来去获取对象中指定的属性"},{"from":2348.079,"to":2351.18,"location":2,"content":"当前的这一行代码等同于后面的代码"},{"from":2351.48,"to":2353.67,"location":2,"content":"而对于数组的结构而言呢"},{"from":2353.67,"to":2355.41,"location":2,"content":"他呢就分成了两部分"},{"from":2355.41,"to":2357.67,"location":2,"content":"第一部分呢叫做基础结构"},{"from":2357.67,"to":2361.33,"location":2,"content":"数组呢通过中括号的形式来去进行一个结构"},{"from":2361.33,"to":2363.79,"location":2,"content":"其中每一个元素"},{"from":2368.09,"to":2372.52,"location":2,"content":"当前的这个代码等同于后面的这一块电容的值"},{"from":2372.74,"to":2375.44,"location":2,"content":"ok然后除了基本结构之外呢"},{"from":2375.44,"to":2378.35,"location":2,"content":"还有第二种叫做reset语法的结构"},{"from":2378.35,"to":2379.61,"location":2,"content":"利用人才的语法"},{"from":2379.61,"to":2383.81,"location":2,"content":"我们可以获取到数组中剩余的所有元素"},{"from":2383.81,"to":2385.9,"location":2,"content":"并且组成一个新数组"},{"from":2386.279,"to":2389.909,"location":2,"content":"当前的这段代码等同于后面的这个代码"},{"from":2389.909,"to":2395.33,"location":2,"content":"ok除了基本的对象和数组结构之外呢"},{"from":2395.33,"to":2397.28,"location":2,"content":"很多时候呢我们遇到都会"},{"from":2397.28,"to":2399.08,"location":2,"content":"很多时候我们可能还会遇到"},{"from":2399.08,"to":2401.34,"location":2,"content":"复杂一点的嵌套结构"},{"from":2401.66,"to":2405.45,"location":2,"content":"嵌套结构指的是从对象中获取到"},{"from":2405.45,"to":2407.04,"location":2,"content":"深层的一个结果"},{"from":2407.04,"to":2409.88,"location":2,"content":"那么比如说现在我有一个percent"},{"from":2409.88,"to":2410.96,"location":2,"content":"在这个percent里面呢"},{"from":2410.96,"to":2411.98,"location":2,"content":"它有一个children"},{"from":2411.98,"to":2413,"location":2,"content":"children是一个数组"},{"from":2413,"to":2415.34,"location":2,"content":"数组里面包含一个对象对吧"},{"from":2415.34,"to":2416.319,"location":2,"content":"叫做曹丕"},{"from":2416.319,"to":2420.579,"location":2,"content":"那么此时我如果说想要通过嵌套结构的形式来"},{"from":2420.579,"to":2422.979,"location":2,"content":"把当前的这个曹丕给他获取到的话"},{"from":2422.979,"to":2424.34,"location":2,"content":"那我们应该怎么办呢"},{"from":2424.359,"to":2426.039,"location":2,"content":"我们来看啊"},{"from":2426.039,"to":2428.199,"location":2,"content":"我们首先需要通过大括号的形式"},{"from":2428.199,"to":2429.88,"location":2,"content":"来解构当前的对象"},{"from":2430.16,"to":2432.26,"location":2,"content":"大括号里面放一个children"},{"from":2432.26,"to":2435.2,"location":2,"content":"表示拿到当前对象里面的childre"},{"from":2435.279,"to":2437.679,"location":2,"content":"然后呢求准是一个数组"},{"from":2437.679,"to":2438.159,"location":2,"content":"所以说呢"},{"from":2438.159,"to":2441.31,"location":2,"content":"我们可以再利用数组的形式去进行结构"},{"from":2441.31,"to":2445.06,"location":2,"content":"ok数组里面的第一个元素就是我们的曹丕对吧"},{"from":2445.06,"to":2446.5,"location":2,"content":"那么我们可以直接a"},{"from":2446.5,"to":2450.53,"location":2,"content":"把这个呃变量写在第一个位置"},{"from":2450.53,"to":2454.18,"location":2,"content":"那么此时我们就拿到了top这样的一个对象了"},{"from":2455.08,"to":2456.36,"location":2,"content":"对于结构而言呢"},{"from":2456.36,"to":2459.359,"location":2,"content":"它是我们日常开发中非常常用的一个语法"},{"from":2459.359,"to":2461.309,"location":2,"content":"本身呢也比较简单"},{"from":2461.309,"to":2463.679,"location":2,"content":"所以说呢我们过的是比较快的"},{"from":2463.679,"to":2466.979,"location":2,"content":"只要以后大家在开发中多使用结构语法的话"},{"from":2466.979,"to":2467.519,"location":2,"content":"就会发现"},{"from":2467.519,"to":2471.2,"location":2,"content":"它本质上其实是一个非常简单的一个东西"},{"from":2471.22,"to":2475.72,"location":2,"content":"那么接下来我们就来看一下第八章和第九章"},{"from":2475.72,"to":2478.16,"location":2,"content":"也就是异步相关的概念"},{"from":2478.339,"to":2479.599,"location":2,"content":"说到异步啊"},{"from":2479.599,"to":2484.06,"location":2,"content":"肯定有很多小伙伴直接想到的就是普尔miss对吧"},{"from":2484.06,"to":2485.95,"location":2,"content":"promise呢是e s6 之后"},{"from":2485.95,"to":2488.56,"location":2,"content":"专门用来处理异步的一个解决方案"},{"from":2488.56,"to":2489.76,"location":2,"content":"大家需要注意的是"},{"from":2489.76,"to":2492.5,"location":2,"content":"promise本身并不执行任何操作"},{"from":2492.5,"to":2499.5,"location":2,"content":"他那只是一个去观察异步操作结果的一个方案"},{"from":2499.919,"to":2505.049,"location":2,"content":"在premise内部对异步的操作分为了三种状态"},{"from":2505.049,"to":2508.22,"location":2,"content":"这三种状态对应三种结果"},{"from":2508.959,"to":2511.019,"location":2,"content":"而从语法上面来看呢"},{"from":2511.019,"to":2515.279,"location":2,"content":"又分为了定义和使用两个部分"},{"from":2515.279,"to":2516.15,"location":2,"content":"ok"},{"from":2516.15,"to":2518.64,"location":2,"content":"其中我们这三种状态"},{"from":2518.64,"to":2522.069,"location":2,"content":"对应的是它的一个remix的定义"},{"from":2522.069,"to":2526.79,"location":2,"content":"而三种结果呢对应的是premise的一个呃使用"},{"from":2526.79,"to":2529.64,"location":2,"content":"那么首先呢我们就先来看三种状态"},{"from":2529.819,"to":2532.399,"location":2,"content":"在premise之中包含了三种状态"},{"from":2532.399,"to":2533.959,"location":2,"content":"分别是待定的状态"},{"from":2533.959,"to":2537.42,"location":2,"content":"已成功的状态和以拒绝的状态"},{"from":2537.64,"to":2539.62,"location":2,"content":"当我们去使用premise的时候"},{"from":2539.62,"to":2542.92,"location":2,"content":"我们需要通过new promise的形式来进行使用"},{"from":2542.92,"to":2544.3,"location":2,"content":"new promise的时候呢"},{"from":2544.3,"to":2547.71,"location":2,"content":"我们需要给它传入一个回调函数"},{"from":2547.71,"to":2549.81,"location":2,"content":"回调函数中接收两个参数"},{"from":2549.81,"to":2551.46,"location":2,"content":"第一个参数resolve"},{"from":2551.46,"to":2553.26,"location":2,"content":"第二个参数reject"},{"from":2553.26,"to":2556.98,"location":2,"content":"那么一旦在一旦进入到promise的这个"},{"from":2556.98,"to":2558.03,"location":2,"content":"回调函数里面"},{"from":2558.03,"to":2561.93,"location":2,"content":"那么此时代码会直接进入到待定的状态"},{"from":2561.93,"to":2563.29,"location":2,"content":"也就是painting的状态"},{"from":2563.29,"to":2564.04,"location":2,"content":"ok"},{"from":2564.04,"to":2569.2,"location":2,"content":"那么如果说我们想要让代码从待定状态"},{"from":2569.2,"to":2571.36,"location":2,"content":"切换为成功状态的话"},{"from":2571.36,"to":2575.42,"location":2,"content":"那么需要通过resolve方法来进行切换"},{"from":2575.42,"to":2577.4,"location":2,"content":"一旦result方法被调用"},{"from":2577.4,"to":2581.24,"location":2,"content":"那么当前的代码就会直接进入到已成功的状态"},{"from":2581.24,"to":2583.43,"location":2,"content":"而一旦reject的方法被调用"},{"from":2583.43,"to":2587.45,"location":2,"content":"那么当前的代码就会直接进入到已拒绝的状态"},{"from":2587.45,"to":2589.97,"location":2,"content":"ok那么看完了状态之后呢"},{"from":2589.97,"to":2591.74,"location":2,"content":"接下来呢我们来去看结果"},{"from":2591.74,"to":2593.24,"location":2,"content":"在premise之中呢"},{"from":2593.24,"to":2595.52,"location":2,"content":"它的结果呢也包含了三个点"},{"from":2595.52,"to":2598.95,"location":2,"content":"than表示已成功状态下的处理程序"},{"from":2598.95,"to":2603.22,"location":2,"content":"catch表示已拒绝状态下的处理程序"},{"from":2603.22,"to":2608.12,"location":2,"content":"而finally呢他表示已敲定状态下的处理程序"},{"from":2608.2,"to":2611.62,"location":2,"content":"finally他无论是成功还是拒绝"},{"from":2611.62,"to":2614.55,"location":2,"content":"在成功拒绝之后都会执行"},{"from":2614.55,"to":2618.81,"location":2,"content":"ok那么下面呢我们就来看一下处理的一个呃"},{"from":2618.81,"to":2621.06,"location":2,"content":"就是premise使用的一个代码"},{"from":2622.1,"to":2624.52,"location":2,"content":"当我们想要通过premise去处理"},{"from":2624.52,"to":2626.47,"location":2,"content":"已成功状态下的时候呢"},{"from":2626.47,"to":2629.14,"location":2,"content":"那么可以直接拿到这个promise的实例"},{"from":2629.14,"to":2632.16,"location":2,"content":"然后通过点zz的形式点赞"},{"from":2632.16,"to":2634.71,"location":2,"content":"标记着当前的代码已成功啊"},{"from":2634.71,"to":2636.57,"location":2,"content":"也就是进入已成功的状态"},{"from":2636.57,"to":2639.67,"location":2,"content":"ok那么如果说想要处理拒绝的话呢"},{"from":2639.67,"to":2642.31,"location":2,"content":"那么我们可以通过点cat的形式表示"},{"from":2642.31,"to":2645.24,"location":2,"content":"当前的代码处于以拒绝的一个状态"},{"from":2645.259,"to":2646.999,"location":2,"content":"那么对于已敲定而言"},{"from":2646.999,"to":2649.699,"location":2,"content":"无论是在成功还是拒绝之后"},{"from":2649.699,"to":2652.56,"location":2,"content":"都可以通过fly的形式呢来去判断已敲定"},{"from":2652.56,"to":2653.82,"location":2,"content":"已敲定的代码"},{"from":2653.82,"to":2657.92,"location":2,"content":"一定在拒绝或成功之后被进行回调"},{"from":2658.14,"to":2661.74,"location":2,"content":"ok那么对于promise来说呢"},{"from":2661.74,"to":2663.24,"location":2,"content":"除了基本的用法之后呢"},{"from":2663.24,"to":2665.56,"location":2,"content":"还涉及到一个叫做链式调用"},{"from":2665.6,"to":2667.28,"location":2,"content":"在promise里面呢"},{"from":2667.28,"to":2670.779,"location":2,"content":"我们可以在点then之后return一个值"},{"from":2670.779,"to":2675.039,"location":2,"content":"return的这个值会被直接标记为promise"},{"from":2675.039,"to":2675.99,"location":2,"content":"点resolve"},{"from":2675.99,"to":2679.59,"location":2,"content":"从而可以让我们继续一直点赞下去"},{"from":2679.59,"to":2682.28,"location":2,"content":"这种形式就叫做链式调用"},{"from":2682.759,"to":2687.199,"location":2,"content":"那么接下来呢就是promise的旧系换新了啊"},{"from":2687.199,"to":2689.04,"location":2,"content":"prime对于promise来说"},{"from":2689.2,"to":2693.22,"location":2,"content":"他现在在开发之中的使用已经是非常普遍的"},{"from":2693.22,"to":2696.46,"location":2,"content":"所以说当大家以后遇到异步问题的时候"},{"from":2696.52,"to":2699.82,"location":2,"content":"那么首先应该考虑的就是promise"},{"from":2700.64,"to":2703.72,"location":2,"content":"promise呢可以帮助我们去处理异步问题"},{"from":2703.72,"to":2705.1,"location":2,"content":"但是从上面的代码之中"},{"from":2705.1,"to":2706.21,"location":2,"content":"我们也可以看出"},{"from":2706.21,"to":2708.25,"location":2,"content":"promise在使用的时候"},{"from":2708.25,"to":2711.46,"location":2,"content":"其实它的一个复杂度并不低"},{"from":2711.62,"to":2714.02,"location":2,"content":"所以呢在e7 之后"},{"from":2714.02,"to":2717.6,"location":2,"content":"tc 39推出了一个叫做异步函数的概念"},{"from":2717.6,"to":2721.6,"location":2,"content":"所谓的异步函数指的就是asc函数"},{"from":2721.68,"to":2726.61,"location":2,"content":"他期望通过与a think和await这种语法糖"},{"from":2726.61,"to":2731.96,"location":2,"content":"来去解决promise在使用时的一个复杂度问题"},{"from":2732.18,"to":2734.4,"location":2,"content":"所以说a thing和await"},{"from":2734.4,"to":2737.79,"location":2,"content":"一定是需要配合promise来进行使用的"},{"from":2737.79,"to":2742.039,"location":2,"content":"那么想要去定义一个义务函数"},{"from":2742.039,"to":2745.77,"location":2,"content":"那么我们一定要通过ascent来去定义"},{"from":2745.77,"to":2747.81,"location":2,"content":"a thing放到函数的前面"},{"from":2747.81,"to":2750.6,"location":2,"content":"标记着当前的函数是一个异步函数"},{"from":2750.68,"to":2752.06,"location":2,"content":"在衣服函数之中"},{"from":2752.06,"to":2758.32,"location":2,"content":"我们可以通过await来去简化promise的操作"},{"from":2758.339,"to":2762.749,"location":2,"content":"利用await把promise的异步的请求"},{"from":2762.749,"to":2766.22,"location":2,"content":"变成了一种同步的写法"},{"from":2766.399,"to":2768.049,"location":2,"content":"这里大家一定要注意"},{"from":2768.049,"to":2773.04,"location":2,"content":"await并不是让异步操作变成同步操作"},{"from":2773.04,"to":2777.88,"location":2,"content":"只是把异步操作变成同步的写法"},{"from":2777.98,"to":2782.27,"location":2,"content":"ok那么一旦当前的代码拥有了同步的写法之后"},{"from":2782.27,"to":2785.02,"location":2,"content":"那么它的代码逻辑就会简单很多了"},{"from":2785.48,"to":2788.89,"location":2,"content":"那么在当前的这个await里面"},{"from":2788.89,"to":2791.98,"location":2,"content":"如果我们想要去捕获catch的话"},{"from":2791.98,"to":2795.82,"location":2,"content":"那么可以通过try catch的形式来进行捕获"},{"from":2797.06,"to":2798.91,"location":2,"content":"对于异步函数而言呢"},{"from":2798.91,"to":2800.32,"location":2,"content":"它呢可以力"},{"from":2800.32,"to":2803.47,"location":2,"content":"配合生成器来去实现一个异步"},{"from":2803.47,"to":2805.08,"location":2,"content":"生成器的一个概念"},{"from":2805.08,"to":2806.76,"location":2,"content":"这里呢大家可以看一下"},{"from":2806.76,"to":2810.12,"location":2,"content":"我们给当前的这个函数呢添加了星号"},{"from":2810.12,"to":2811.64,"location":2,"content":"表示是生成器"},{"from":2811.64,"to":2815,"location":2,"content":"同时在函数的前面我们加了a c"},{"from":2815,"to":2816.33,"location":2,"content":"表示是一部函数"},{"from":2816.33,"to":2818.97,"location":2,"content":"那么此时这样的一个函数呢"},{"from":2818.97,"to":2821.46,"location":2,"content":"就被叫做异步生成器"},{"from":2821.64,"to":2823.92,"location":2,"content":"当前的这个异步生成器呢"},{"from":2823.92,"to":2828.54,"location":2,"content":"可以帮助我们去处理多个的那个"},{"from":2828.54,"to":2833.94,"location":2,"content":"帮助我们去手动控制多个异步请求的请求顺序"},{"from":2833.94,"to":2836.25,"location":2,"content":"以及处理的结果"},{"from":2836.25,"to":2840.93,"location":2,"content":"o那么比如说在这里呢我去同时发起三个请求"},{"from":2840.93,"to":2843.84,"location":2,"content":"那么就可以利用当前的这个异步生成器"},{"from":2843.84,"to":2846.15,"location":2,"content":"利用while循环的形式来去"},{"from":2846.15,"to":2848.85,"location":2,"content":"依次把这些请求都给它发出去"},{"from":2848.85,"to":2851.73,"location":2,"content":"ok当前的这个while循环里面的代码呢"},{"from":2851.73,"to":2852.63,"location":2,"content":"可能有些复杂"},{"from":2852.63,"to":2855,"location":2,"content":"所以说呢我在上面写了一个注释"},{"from":2855,"to":2858.02,"location":2,"content":"这个注释这个注释的内容呢"},{"from":2858.02,"to":2862.4,"location":2,"content":"就是下面这段代码简写之后的一种形式啊"},{"from":2862.4,"to":2864.96,"location":2,"content":"或者说复杂写法之后的一种形式"},{"from":2864.96,"to":2867.12,"location":2,"content":"上面这段代码应该更好理解"},{"from":2867.12,"to":2868.98,"location":2,"content":"配合这个注释的代码"},{"from":2868.98,"to":2872.07,"location":2,"content":"希望大家可以理解咱们下面的这个简写的语法"},{"from":2872.07,"to":2875.64,"location":2,"content":"ok那么这样的一个简写的语法呢"},{"from":2875.64,"to":2877.74,"location":2,"content":"甚至可以进一步的简写"},{"from":2877.74,"to":2881.22,"location":2,"content":"那么也就是利用for a weight of的形式"},{"from":2881.22,"to":2883.23,"location":2,"content":"去完成进一步的简化"},{"from":2883.23,"to":2886.23,"location":2,"content":"我们可以把这个for a bit of的代码呢"},{"from":2886.23,"to":2888.4,"location":2,"content":"给大家截个图"},{"from":2890.24,"to":2892.27,"location":2,"content":"然后呢大家可以做一下对比"},{"from":2892.27,"to":2893.92,"location":2,"content":"ok通过对比"},{"from":2893.92,"to":2898.01,"location":2,"content":"大家可以发现我们的这个for awake of"},{"from":2898.01,"to":2902.38,"location":2,"content":"这种语法应该要比这个代码要简化的多"},{"from":2902.38,"to":2903.37,"location":2,"content":"没错吧"},{"from":2903.37,"to":2908.8,"location":2,"content":"所以说呢大家可以呃尽量吧能够理解for a bit of"},{"from":2908.8,"to":2911.16,"location":2,"content":"这个语法的一个写法"},{"from":2911.16,"to":2912.03,"location":2,"content":"好吧"},{"from":2912.03,"to":2915.77,"location":2,"content":"这是我们关于我们的异步生成器这一块"},{"from":2915.77,"to":2917.93,"location":2,"content":"那么异步生成器说完之后呢"},{"from":2917.93,"to":2920.6,"location":2,"content":"咱们整个的呃第九章哈"},{"from":2920.6,"to":2923.62,"location":2,"content":"它的一个重点的东西就给大家说完了"},{"from":2923.64,"to":2927.66,"location":2,"content":"那么在他的就行换新的这个环节里面呢"},{"from":2927.66,"to":2932.759,"location":2,"content":"呃如果我们如果以后想要去呃是处理异步操作"},{"from":2932.759,"to":2934.979,"location":2,"content":"那么可以使用ascent加await"},{"from":2934.979,"to":2937.679,"location":2,"content":"配合premise的形式来进行处理"},{"from":2937.679,"to":2941.64,"location":2,"content":"ok那么接下来呢就是我们的第十章啊"},{"from":2941.64,"to":2946.3,"location":2,"content":"也就是模板字面量标签函数和新的字符串特性"},{"from":2946.3,"to":2947.74,"location":2,"content":"从第十章开始"},{"from":2947.74,"to":2949.75,"location":2,"content":"一直到14章为止"},{"from":2949.75,"to":2954.04,"location":2,"content":"这五个章节呢主要是对传统技术的一个升级"},{"from":2954.1,"to":2955.87,"location":2,"content":"我们以第十章为例"},{"from":2955.87,"to":2957.58,"location":2,"content":"在第十章里面"},{"from":2957.819,"to":2961.029,"location":2,"content":"传统技术之中如果说想要拼接字符串的话"},{"from":2961.029,"to":2963.729,"location":2,"content":"那么一定是通过加号这个运算符"},{"from":2963.729,"to":2967.13,"location":2,"content":"来去进行一个隐式转换去进行拼接的"},{"from":2967.13,"to":2968.63,"location":2,"content":"但是呢在es 6之后呢"},{"from":2968.63,"to":2970.43,"location":2,"content":"它提供了模板字符串的概念啊"},{"from":2970.43,"to":2972.08,"location":2,"content":"我们就不需要这么复杂了"},{"from":2972.5,"to":2974,"location":2,"content":"那么除此之外呢"},{"from":2974,"to":2979.34,"location":2,"content":"嗯在这一章之中也提供了很多字符串的方法"},{"from":2979.34,"to":2983.37,"location":2,"content":"ok嗯除此之外还有一些字符串的一些迭代啊"},{"from":2983.37,"to":2986.96,"location":2,"content":"比如说我们想要去迭代字符一个字符串的话"},{"from":2986.96,"to":2988.76,"location":2,"content":"那么也可以通过迭代器啊"},{"from":2988.76,"to":2991.87,"location":2,"content":"影视的迭代器for来去完成对应的迭代"},{"from":2991.87,"to":2996.61,"location":2,"content":"ok呃这是我们整个的一个呃第十章哈"},{"from":2996.61,"to":2997.39,"location":2,"content":"第十章的内容呢"},{"from":2997.39,"to":2999.78,"location":2,"content":"其实相对而言是比较简单一些的"},{"from":2999.819,"to":3002.3,"location":2,"content":"ok在这一章的内容之中呢"},{"from":3002.3,"to":3005.9,"location":2,"content":"对于我们日常的开发或者面试里面"},{"from":3005.9,"to":3008.75,"location":2,"content":"有用的复杂的东西呢其实比较少的"},{"from":3008.75,"to":3009.54,"location":2,"content":"ok"},{"from":3010,"to":3012.18,"location":2,"content":"所以说呢这里面的很多东西"},{"from":3012.18,"to":3014.31,"location":2,"content":"我就给大家去进行略过了啊"},{"from":3014.31,"to":3016.74,"location":2,"content":"呃这是面除了这些之外呢"},{"from":3016.74,"to":3019.92,"location":2,"content":"可能还有一些比如说union code的一些改进"},{"from":3019.92,"to":3022.8,"location":2,"content":"ok这些改进呢嗯在我们开发中其实用处不大"},{"from":3022.8,"to":3024.38,"location":2,"content":"如果大家想要理解的话"},{"from":3024.38,"to":3026.12,"location":2,"content":"那么可以到书中去看一下"},{"from":3027.32,"to":3029.7,"location":2,"content":"然后再往后呢是第11章呃"},{"from":3029.7,"to":3031.02,"location":2,"content":"对于第11章而言"},{"from":3031.02,"to":3033.42,"location":2,"content":"它和第十章是非常类似的"},{"from":3033.42,"to":3035.37,"location":2,"content":"第十章呢介绍的是字符串"},{"from":3035.37,"to":3037.5,"location":2,"content":"第11章介绍的是数组"},{"from":3037.5,"to":3039.76,"location":2,"content":"ok在数组这里呢"},{"from":3039.76,"to":3040.99,"location":2,"content":"它主要包含两部分"},{"from":3040.99,"to":3043.47,"location":2,"content":"第一部分呢还是数组的一些新方法"},{"from":3043.47,"to":3045.51,"location":2,"content":"这些方法呢同样哈我们不去说"},{"from":3045.51,"to":3047.43,"location":2,"content":"大家可以看一下"},{"from":3047.43,"to":3050.399,"location":2,"content":"哪个感兴趣到md上面自己去看一下就可以了"},{"from":3050.399,"to":3053.22,"location":2,"content":"然后第二个呢是叫做类型化数组"},{"from":3053.339,"to":3057.059,"location":2,"content":"对我们知道在javascript里面啊"},{"from":3057.059,"to":3059.29,"location":2,"content":"javascript的传统数组之中"},{"from":3059.29,"to":3062.14,"location":2,"content":"其实传统的数组呢它并不是一个真正的数组"},{"from":3062.14,"to":3062.59,"location":2,"content":"对不对"},{"from":3062.59,"to":3064.02,"location":2,"content":"它本质上是一个对象"},{"from":3064.02,"to":3066.54,"location":2,"content":"所以说呢在es 6之后"},{"from":3066.54,"to":3068.7,"location":2,"content":"tc 39提出来了一个新的概念"},{"from":3068.7,"to":3070.29,"location":2,"content":"就是类型化数组"},{"from":3070.29,"to":3073.11,"location":2,"content":"类型化数组呢为不同的类型"},{"from":3073.11,"to":3074.94,"location":2,"content":"指定了不同的一个数组"},{"from":3074.94,"to":3076.859,"location":2,"content":"可以存储不同类型的值"},{"from":3076.859,"to":3078.539,"location":2,"content":"但是在我们的日常使用中"},{"from":3078.539,"to":3081.359,"location":2,"content":"我们可能很少主动使用这个东西"},{"from":3081.359,"to":3083.07,"location":2,"content":"所以大家只需要知道就可以"},{"from":3083.07,"to":3086.55,"location":2,"content":"ok然后接下来呢就是它的一个旧机换新哈"},{"from":3086.55,"to":3088.59,"location":2,"content":"数组里面新增的方法呢"},{"from":3088.59,"to":3090.66,"location":2,"content":"在日常开发中是非常有用的"},{"from":3090.66,"to":3092.52,"location":2,"content":"所以说呢他的旧机换新"},{"from":3092.52,"to":3094.87,"location":2,"content":"主要是针对于这些方法来说的"},{"from":3094.87,"to":3096.94,"location":2,"content":"那么大家针对于第11章的话"},{"from":3096.94,"to":3100.3,"location":2,"content":"只是主要了解好这些方法的作用就可以了"},{"from":3101.22,"to":3102.44,"location":2,"content":"然后再往下哈"},{"from":3102.44,"to":3104.99,"location":2,"content":"是我们的map和set"},{"from":3104.99,"to":3110.899,"location":2,"content":"map和set呢里面其实不同于刚才的两张"},{"from":3110.899,"to":3114.139,"location":2,"content":"刚才的两张呢里面的很多内容都比较简单"},{"from":3114.139,"to":3117.69,"location":2,"content":"但是呢map和set里面可能有很多"},{"from":3117.69,"to":3121.08,"location":2,"content":"对于大多数小伙伴而言的知识盲区"},{"from":3121.08,"to":3123.22,"location":2,"content":"o在这一章里面"},{"from":3123.22,"to":3126.4,"location":2,"content":"我们一共要讲到四个新的对象"},{"from":3126.4,"to":3130.859,"location":2,"content":"分别是map swake map和wk set"},{"from":3131.999,"to":3133.6,"location":2,"content":"那么我们首先先来看map"},{"from":3133.96,"to":3135.07,"location":2,"content":"map呢"},{"from":3135.07,"to":3139.57,"location":2,"content":"它指的是以键值对的形式存储数据的对象"},{"from":3139.57,"to":3142.36,"location":2,"content":"其中键值对呢可以是任何的值"},{"from":3142.52,"to":3144.32,"location":2,"content":"那么这样我们乍一看啊"},{"from":3144.32,"to":3146.12,"location":2,"content":"可能和普通对象没有什么区别"},{"from":3146.12,"to":3146.54,"location":2,"content":"对不对"},{"from":3146.54,"to":3148.2,"location":2,"content":"但是大家要注意的是"},{"from":3148.24,"to":3151.93,"location":2,"content":"普通对象中key只能是字符串"},{"from":3151.93,"to":3155.74,"location":2,"content":"而map对象中key可以是任意值"},{"from":3155.939,"to":3160.079,"location":2,"content":"也就是说虽然存储的都是键值对的形式"},{"from":3160.079,"to":3163.1,"location":2,"content":"但是在内容上是有大大不同的"},{"from":3163.2,"to":3164.46,"location":2,"content":"除此之外呢"},{"from":3164.46,"to":3165.72,"location":2,"content":"在api上面"},{"from":3165.72,"to":3169.819,"location":2,"content":"map也和传统的对象有比较大的区别"},{"from":3169.819,"to":3174.379,"location":2,"content":"在这里我列举出来了map创建以及增删改查"},{"from":3174.379,"to":3177.99,"location":2,"content":"获取长度迭代等等的一些方法"},{"from":3177.99,"to":3180.93,"location":2,"content":"ok那么大家如果说对map不熟悉的话"},{"from":3180.93,"to":3183.48,"location":2,"content":"可以看一下这些方法"},{"from":3183.48,"to":3185.58,"location":2,"content":"并且呢进行一下实际的操作"},{"from":3186.28,"to":3187.68,"location":2,"content":"那么卖部说完之后呢"},{"from":3187.68,"to":3190.8,"location":2,"content":"接下来第二个是sk set的话"},{"from":3190.8,"to":3192.48,"location":2,"content":"可能有些同学有些小伙伴啊"},{"from":3192.48,"to":3195.68,"location":2,"content":"可能呃就是进行过一些使用啊"},{"from":3195.68,"to":3197.27,"location":2,"content":"对set呢有过一些了解"},{"from":3197.27,"to":3199.01,"location":2,"content":"ok那么对于set呢"},{"from":3199.01,"to":3203.16,"location":2,"content":"它的一个特性是它内部存储的永远是唯一值"},{"from":3203.16,"to":3206.43,"location":2,"content":"也就是它里面的元素是不可以重复的"},{"from":3206.43,"to":3211.11,"location":2,"content":"ok那么这种特性呢在数组去重中会非常的有用"},{"from":3211.11,"to":3213.03,"location":2,"content":"同样他的一些语法呢"},{"from":3213.03,"to":3216.08,"location":2,"content":"和传统的数组也有较大的差距啊"},{"from":3216.08,"to":3218.6,"location":2,"content":"我在这里呢同样列举出来了set的创建"},{"from":3218.6,"to":3221.92,"location":2,"content":"以及增删查改等等的一些方法"},{"from":3221.92,"to":3224.29,"location":2,"content":"ok对set不是很熟悉的同学"},{"from":3224.29,"to":3227.42,"location":2,"content":"大家可以去实验一下这些语法"},{"from":3227.62,"to":3230.08,"location":2,"content":"那么了解完了map和set之后呢"},{"from":3230.08,"to":3233.96,"location":2,"content":"那么剩下的就是week map和week s wk"},{"from":3233.96,"to":3238.61,"location":2,"content":"map和wink set呢我们把它叫做map set的week版本"},{"from":3238.61,"to":3239.36,"location":2,"content":"ok"},{"from":3239.36,"to":3240.98,"location":2,"content":"那么这个wk版本"},{"from":3240.98,"to":3244.899,"location":2,"content":"它和普通的非week版本有什么区别呢"},{"from":3244.899,"to":3247.64,"location":2,"content":"这个区别主要体现在三个地方"},{"from":3247.64,"to":3252.81,"location":2,"content":"首先第一个地方wake版本的值一定是弱引用的"},{"from":3252.81,"to":3256.82,"location":2,"content":"在vk map中它的一个键是弱引用的"},{"from":3256.82,"to":3260.63,"location":2,"content":"在week set中它的一个值是弱引用的"},{"from":3260.63,"to":3265.04,"location":2,"content":"ok那么同样它还体现在当前的弱引用"},{"from":3265.04,"to":3270.26,"location":2,"content":"会导致键或者值不保存在内存里面"},{"from":3270.26,"to":3274.48,"location":2,"content":"最后week版本的map和set不可迭代"},{"from":3274.64,"to":3278.22,"location":2,"content":"ok那么在这一章里面"},{"from":3278.22,"to":3281.22,"location":2,"content":"最后的救济和换新的这个环节里面哈"},{"from":3281.22,"to":3282.819,"location":2,"content":"同样包含三部分"},{"from":3282.819,"to":3284.139,"location":2,"content":"首先第一部分呢"},{"from":3284.139,"to":3287.499,"location":2,"content":"如果说大家想要通过键值对的形式存储数据"},{"from":3287.499,"to":3290.54,"location":2,"content":"同时呢这个键不是一个字符串的话"},{"from":3290.54,"to":3293.78,"location":2,"content":"那么此时大家需要通过map来进行存储"},{"from":3293.78,"to":3295.16,"location":2,"content":"而set的话呢"},{"from":3295.16,"to":3298.42,"location":2,"content":"它里面会包存储唯一值"},{"from":3298.52,"to":3302.27,"location":2,"content":"所以说如果大家想要去进行数组去重的话"},{"from":3302.27,"to":3305,"location":2,"content":"那么可以考虑一下使用set"},{"from":3305,"to":3309.1,"location":2,"content":"最后如果说你希望key"},{"from":3309.1,"to":3311.92,"location":2,"content":"跟随变量的销毁而被回收的话"},{"from":3311.92,"to":3315.47,"location":2,"content":"那么应该使用week map或者weeks"},{"from":3315.47,"to":3316.46,"location":2,"content":"ok"},{"from":3316.46,"to":3319.879,"location":2,"content":"那么第12章看完之后呢"},{"from":3319.879,"to":3321.679,"location":2,"content":"接下来呢就是第13章哈"},{"from":3321.679,"to":3323.329,"location":2,"content":"也就是我们的模块"},{"from":3323.329,"to":3327.3,"location":2,"content":"第13章呢主要讲解的是模块化的一个概念"},{"from":3327.7,"to":3329.08,"location":2,"content":"在前端领域"},{"from":3329.08,"to":3331.51,"location":2,"content":"任何的模块化都会被分成两部分"},{"from":3331.51,"to":3333.22,"location":2,"content":"导入和导出"},{"from":3333.439,"to":3334.249,"location":2,"content":"ok"},{"from":3334.249,"to":3335.359,"location":2,"content":"那么前端之中"},{"from":3335.359,"to":3337.879,"location":2,"content":"现在主要用到的模块化方案有两个"},{"from":3337.879,"to":3341.42,"location":2,"content":"一个呢叫做e s m啊"},{"from":3341.42,"to":3342.26,"location":2,"content":"e s m"},{"from":3342.26,"to":3345.11,"location":2,"content":"第二个呢叫做cg s"},{"from":3345.11,"to":3348.35,"location":2,"content":"其中e s m呢被叫做e s module"},{"from":3348.35,"to":3349.61,"location":2,"content":"它是es 6的模块化"},{"from":3349.61,"to":3351.47,"location":2,"content":"cg s呢叫做common js"},{"from":3351.47,"to":3352.819,"location":2,"content":"它是node的模块化"},{"from":3352.819,"to":3356.38,"location":2,"content":"ok那我们首先呢我们先来看第一个啊e s m"},{"from":3356.38,"to":3357.64,"location":2,"content":"e s m的概念呢"},{"from":3357.64,"to":3358.48,"location":2,"content":"刚才我们说到了"},{"from":3358.48,"to":3364.02,"location":2,"content":"他是e s2015 之后新增的标准模块化方案"},{"from":3364.1,"to":3368.2,"location":2,"content":"ok那么针对于我们当前的e s m而言"},{"from":3368.2,"to":3370.9,"location":2,"content":"它的使用其实是比较复杂的"},{"from":3370.9,"to":3374.15,"location":2,"content":"它呢虽然说是导入和导出"},{"from":3374.15,"to":3377.859,"location":2,"content":"但是导出分为直接导出和按需导出"},{"from":3377.859,"to":3382.08,"location":2,"content":"导入又对应直接导入和按需导入"},{"from":3382.08,"to":3385.95,"location":2,"content":"除此之外还有一个导入并导出的环节"},{"from":3385.95,"to":3388.74,"location":2,"content":"也就是说e s m它的一个使用呢"},{"from":3388.74,"to":3391.16,"location":2,"content":"大致会分为五类"},{"from":3391.279,"to":3393.469,"location":2,"content":"那么我们首先一个一个来看"},{"from":3393.469,"to":3395.8,"location":2,"content":"首先我们先来看直接导出"},{"from":3396.16,"to":3397.72,"location":2,"content":"在e s m之中"},{"from":3397.72,"to":3401.2,"location":2,"content":"通过export default来去完成直接导出"},{"from":3401.2,"to":3403.62,"location":2,"content":"直接导出对应直接导入啊"},{"from":3403.62,"to":3406.39,"location":2,"content":"这种形式的导出对应这种形式的导入"},{"from":3406.39,"to":3408.46,"location":2,"content":"那么接下来呢是按需导出"},{"from":3408.46,"to":3409.33,"location":2,"content":"按需导出"},{"from":3409.33,"to":3411.91,"location":2,"content":"通过export的形式去进行导出"},{"from":3411.91,"to":3414.35,"location":2,"content":"按需导出对应按需导入"},{"from":3414.35,"to":3416.03,"location":2,"content":"按需导入呢有两种"},{"from":3416.03,"to":3420.07,"location":2,"content":"第一种呢是直接导入对应的指定变量"},{"from":3420.07,"to":3425.08,"location":2,"content":"第二种呢是直接导入所有按需导出的东西"},{"from":3425.08,"to":3428.26,"location":2,"content":"ok我们通过通配符星号来表示"},{"from":3428.26,"to":3429.94,"location":2,"content":"所有按需导出的东西"},{"from":3429.94,"to":3435.84,"location":2,"content":"通过is为导出的所有东西定义一个新的变量名"},{"from":3435.84,"to":3438.84,"location":2,"content":"ok那么除了导入和导出之外"},{"from":3438.84,"to":3443.16,"location":2,"content":"e s m还有一个特殊的地方叫做导入并导出"},{"from":3443.18,"to":3445.04,"location":2,"content":"导入并导出的这种概念呢"},{"from":3445.04,"to":3448.45,"location":2,"content":"表示从指定位置导入一个变量"},{"from":3448.45,"to":3451.03,"location":2,"content":"并且把这个变量再给它导出出去"},{"from":3451.03,"to":3452.83,"location":2,"content":"ok这在我们实际开发中"},{"from":3452.83,"to":3455.32,"location":2,"content":"也是非常常见的一个环节"},{"from":3456.22,"to":3458.22,"location":2,"content":"然后看完了e s m之后呢"},{"from":3458.22,"to":3460.77,"location":2,"content":"接下来我们来看cg啊"},{"from":3460.77,"to":3464.33,"location":2,"content":"cg s主要是在node中去进行模块化的一个方案"},{"from":3464.33,"to":3467.819,"location":2,"content":"它的导入和导出呢相对而言会比较简单"},{"from":3467.819,"to":3471.479,"location":2,"content":"ok导出通过某酒店exports进行导出"},{"from":3471.479,"to":3474.64,"location":2,"content":"导入通过与curry的形式去进行导入"},{"from":3475.26,"to":3479.47,"location":2,"content":"那么呃除了刚才我们说到的这两个之外哈"},{"from":3479.47,"to":3482.71,"location":2,"content":"其实在前端领域还有一些其他的我们画画方案"},{"from":3482.71,"to":3487.74,"location":2,"content":"比如说u m d a m d c m d这些模块化方案呢"},{"from":3487.74,"to":3490.38,"location":2,"content":"在应用层的开发中其实是很少见的"},{"from":3490.38,"to":3493.1,"location":2,"content":"所以说呢我们就不去过多讨论了"},{"from":3493.319,"to":3496.61,"location":2,"content":"那么最后呢就是这个旧习换新的环节"},{"from":3496.61,"to":3498.29,"location":2,"content":"因为对于模块化的问题呢"},{"from":3498.29,"to":3501.63,"location":2,"content":"在现在的企业开发中已经是非常常见的了"},{"from":3501.63,"to":3503.07,"location":2,"content":"无论是e m s也好"},{"from":3503.07,"to":3505.47,"location":2,"content":"还是呃cg也好啊"},{"from":3505.47,"to":3506.43,"location":2,"content":"e s m也好"},{"from":3506.43,"to":3507.57,"location":2,"content":"还是cg s也好"},{"from":3507.57,"to":3509.46,"location":2,"content":"其实都已经得到了广泛的应用"},{"from":3509.46,"to":3511.38,"location":2,"content":"所以说呢在这一章的内容里面呢"},{"from":3511.38,"to":3512.64,"location":2,"content":"对于大多数小伙伴而言"},{"from":3512.64,"to":3514.71,"location":2,"content":"应该是没有什么压力的"},{"from":3514.71,"to":3518.53,"location":2,"content":"对那么接下来呢是第14章啊"},{"from":3518.53,"to":3520.46,"location":2,"content":"反射和代理"},{"from":3520.68,"to":3525.12,"location":2,"content":"ok呃其中反射哈代表的是reflect哈"},{"from":3525.12,"to":3527.18,"location":2,"content":"代理呢代表的是xy"},{"from":3527.999,"to":3533.629,"location":2,"content":"如果说是就是之前看过我视频的那个呃"},{"from":3533.629,"to":3535.279,"location":2,"content":"小伙伴来说哈"},{"from":3535.279,"to":3538.759,"location":2,"content":"嗯咱们第一次接触反射和代理"},{"from":3538.759,"to":3541.579,"location":2,"content":"其实应该是在vivo 3的源码那个视频中文"},{"from":3541.579,"to":3542.399,"location":2,"content":"对不对"},{"from":3542.399,"to":3546.659,"location":2,"content":"ok这两个api呢在和刀多数的情况下"},{"from":3546.659,"to":3550.34,"location":2,"content":"其实是应该配合来进行使用的"},{"from":3550.34,"to":3552.62,"location":2,"content":"任何一个单独拿出来"},{"from":3552.62,"to":3555.68,"location":2,"content":"在复杂场景中意义都不大"},{"from":3556.439,"to":3559.819,"location":2,"content":"所以说呢我们再去介绍这两个api的时候"},{"from":3559.819,"to":3562.669,"location":2,"content":"我们也会把它们先给他们分开介绍"},{"from":3562.669,"to":3564.5,"location":2,"content":"然后呢再合起来去说"},{"from":3565.7,"to":3568.36,"location":2,"content":"那么首先呢我们先来看反射啊"},{"from":3568.36,"to":3569.74,"location":2,"content":"也就是reflect"},{"from":3569.74,"to":3571.54,"location":2,"content":"反噬呢这个东西啊"},{"from":3571.54,"to":3575.96,"location":2,"content":"它提供了对象基本操作的各种方法"},{"from":3576.18,"to":3577.41,"location":2,"content":"什么意思呢"},{"from":3577.41,"to":3580.47,"location":2,"content":"比如说我们可以通过reflect"},{"from":3580.47,"to":3583.84,"location":2,"content":"来去获取和设置属性值"},{"from":3584.16,"to":3586.56,"location":2,"content":"获取或者设置对象的原型"},{"from":3586.58,"to":3590,"location":2,"content":"或者说呢从对象里面去删除一些属性"},{"from":3590,"to":3593.11,"location":2,"content":"ok那么比如说我们来看这个代码啊"},{"from":3593.11,"to":3595.57,"location":2,"content":"在这里呢我有一个对象叫做plc"},{"from":3595.57,"to":3599.66,"location":2,"content":"然后可以通过reflect.get process name"},{"from":3599.66,"to":3604.97,"location":2,"content":"这表示我们从proceed里面去获取name的属性值"},{"from":3604.97,"to":3606.99,"location":2,"content":"那么得到的结果就是张三"},{"from":3606.99,"to":3609.09,"location":2,"content":"ok那么看到这哈"},{"from":3609.09,"to":3610.29,"location":2,"content":"可能小伙伴就说了"},{"from":3610.29,"to":3610.53,"location":2,"content":"对不对"},{"from":3610.53,"to":3612.21,"location":2,"content":"你这玩意有啥用呀"},{"from":3612.21,"to":3613.35,"location":2,"content":"我这么麻烦"},{"from":3613.35,"to":3615.56,"location":2,"content":"我直接proceed name不行吗"},{"from":3615.879,"to":3617.769,"location":2,"content":"对不对对吧"},{"from":3617.769,"to":3620.979,"location":2,"content":"所以说呢这个reflect的这个真正意义"},{"from":3620.979,"to":3624.91,"location":2,"content":"它需要配合brexy再去说"},{"from":3624.91,"to":3628.6,"location":2,"content":"那么接下来呢我们就来看一下brexy proxy啊"},{"from":3628.6,"to":3630.56,"location":2,"content":"被称之为是代理"},{"from":3630.56,"to":3635.39,"location":2,"content":"它的作用呢是拦截目标对象的基本操作"},{"from":3635.39,"to":3640.16,"location":2,"content":"ok并且呢可以拥有目标对象所有的属性和方法"},{"from":3640.2,"to":3641.94,"location":2,"content":"好比如说在view 3里面呢"},{"from":3641.94,"to":3644.67,"location":2,"content":"它就是通过brexit来去完成的数据代理"},{"from":3644.67,"to":3647.82,"location":2,"content":"那么具体是怎么去用的呢"},{"from":3647.859,"to":3650.259,"location":2,"content":"我们来去看一下当前哈"},{"from":3650.259,"to":3652.34,"location":2,"content":"这里的代码呢有一点点多"},{"from":3652.34,"to":3654.62,"location":2,"content":"ok但是呢我们来去说一下"},{"from":3654.62,"to":3656.18,"location":2,"content":"大家大家自己去"},{"from":3656.18,"to":3657.98,"location":2,"content":"或者说大家自己写一下啊"},{"from":3657.98,"to":3659.3,"location":2,"content":"应该就能搞明白"},{"from":3659.319,"to":3662.019,"location":2,"content":"在这里呢我有一个对象叫做proceed"},{"from":3662.019,"to":3663.639,"location":2,"content":"ok然后呢"},{"from":3663.639,"to":3666.979,"location":2,"content":"这个proce在new practice的时候"},{"from":3666.979,"to":3669.379,"location":2,"content":"作为第一个参数传了进去"},{"from":3669.379,"to":3672.81,"location":2,"content":"ok那么在这样的一种情况之下"},{"from":3672.81,"to":3676.9,"location":2,"content":"而sin就被称为被代理对象"},{"from":3676.98,"to":3681.92,"location":2,"content":"而new proxy得到的实例p就是代理对象"},{"from":3682.02,"to":3685.8,"location":2,"content":"那么也就意味着我的这个p哈代理对象"},{"from":3685.8,"to":3689.94,"location":2,"content":"它呢可以代理percent所有操作"},{"from":3689.94,"to":3694.25,"location":2,"content":"同时将拥有percent的所有属性"},{"from":3694.25,"to":3697.16,"location":2,"content":"那么下面呢我们在第二个参数这里"},{"from":3697.16,"to":3699.62,"location":2,"content":"传了一个options培训对象"},{"from":3699.62,"to":3702.23,"location":2,"content":"在这个options配置对象之中呢"},{"from":3702.23,"to":3705.3,"location":2,"content":"我们传了一个set方法和一个get方法"},{"from":3705.48,"to":3712.759,"location":2,"content":"其中呢set方法可以监听到代理对象的赋值操作"},{"from":3712.759,"to":3717.05,"location":2,"content":"get方法可以监听到代理对象的取值操作"},{"from":3717.05,"to":3721.25,"location":2,"content":"那比如说我们就可以通过这种形式触发set"},{"from":3721.25,"to":3723.67,"location":2,"content":"通过这种形式触发get"},{"from":3723.67,"to":3725.47,"location":2,"content":"但是大家需要注意的是"},{"from":3725.47,"to":3726.97,"location":2,"content":"我们当前的这个操作"},{"from":3726.97,"to":3730.73,"location":2,"content":"一定是在代理对象上去进行操作的"},{"from":3730.73,"to":3735.819,"location":2,"content":"ok只有practice的实力才会触发这一块proxy"},{"from":3735.819,"to":3736.419,"location":2,"content":"代码哈"},{"from":3736.419,"to":3737.95,"location":2,"content":"可能有一点点复杂"},{"from":3737.95,"to":3741.4,"location":2,"content":"所以说呢大家最好在这里暂停一下视频"},{"from":3741.4,"to":3744.19,"location":2,"content":"把这个代码呢呃自己写一下"},{"from":3744.19,"to":3746.02,"location":2,"content":"然后再继续往下看"},{"from":3746.02,"to":3749.02,"location":2,"content":"ok那么下面呢我们就来看一下"},{"from":3749.02,"to":3752.64,"location":2,"content":"proxy配合reflect使用的一个场景"},{"from":3752.64,"to":3755.94,"location":2,"content":"ok这个场景呢可能也有一点点复杂哈"},{"from":3755.94,"to":3758.09,"location":2,"content":"我们给大家去说一下"},{"from":3758.09,"to":3760.13,"location":2,"content":"在当前的这个场景之中呢"},{"from":3760.13,"to":3760.97,"location":2,"content":"我们有一个percent"},{"from":3760.97,"to":3763.5,"location":2,"content":"percent里面有一个fname对吧"},{"from":3763.5,"to":3766.92,"location":2,"content":"file name呢通过get标识符去进行了一个标记"},{"from":3766.92,"to":3773.54,"location":2,"content":"k同时file name中去获取到了this last name和first name"},{"from":3773.66,"to":3780.05,"location":2,"content":"那么现在呢当我就是触发file name的get行为的时候"},{"from":3780.05,"to":3785.759,"location":2,"content":"那么此时触发file name的get的行为会触发一次get"},{"from":3785.759,"to":3786.529,"location":2,"content":"对吧"},{"from":3786.529,"to":3791.49,"location":2,"content":"last name会触发第二次get first name会触发第三次盖"},{"from":3791.49,"to":3795.33,"location":2,"content":"那么也就意味着我当前的这一次操作"},{"from":3795.33,"to":3797.43,"location":2,"content":"应该触发三次"},{"from":3797.43,"to":3800.4,"location":2,"content":"该行为是这样吧"},{"from":3800.46,"to":3806.58,"location":2,"content":"但是如果说我们在brexit这个get这个函数这里"},{"from":3806.58,"to":3810.49,"location":2,"content":"通过这种形式去进行return的话"},{"from":3810.49,"to":3813.34,"location":2,"content":"那么他就不会触发三次"},{"from":3813.34,"to":3815.26,"location":2,"content":"只会触发一次"},{"from":3815.46,"to":3817.11,"location":2,"content":"原因是因为什么呢"},{"from":3817.11,"to":3822.34,"location":2,"content":"这是因为fair name中的this它指向的是target"},{"from":3822.54,"to":3824.37,"location":2,"content":"ok也就是说"},{"from":3824.37,"to":3827.61,"location":2,"content":"当我通过这种形式去访问file name的时候"},{"from":3827.61,"to":3831.44,"location":2,"content":"里面的这个this它指向的是我的percent"},{"from":3831.859,"to":3835.219,"location":2,"content":"而我们知道当this指向plc的时候"},{"from":3835.219,"to":3836.899,"location":2,"content":"是不会触发该行为的"},{"from":3836.899,"to":3839.22,"location":2,"content":"所以它只会触发一次"},{"from":3839.359,"to":3840.709,"location":2,"content":"那么怎么办呢"},{"from":3840.709,"to":3844,"location":2,"content":"那此时我们就需要用到reflect"},{"from":3844.06,"to":3845.32,"location":2,"content":"reflect呢"},{"from":3845.32,"to":3847.84,"location":2,"content":"它的第三个参数可以传递"},{"from":3847.84,"to":3851.12,"location":2,"content":"触发该属性时的this指向"},{"from":3851.18,"to":3852.08,"location":2,"content":"也就是说"},{"from":3852.08,"to":3856.76,"location":2,"content":"我们可以通过第三个参数来指定file name下的this指"},{"from":3856.76,"to":3857.03,"location":2,"content":"向"},{"from":3857.03,"to":3859.04,"location":2,"content":"指定指向的是谁"},{"from":3859.22,"to":3861.26,"location":2,"content":"这里传递的这个reserve"},{"from":3861.26,"to":3863.54,"location":2,"content":"其实代表的就是我的proxy"},{"from":3863.54,"to":3866.51,"location":2,"content":"那么也就意味着this会指向proxy"},{"from":3866.51,"to":3871.7,"location":2,"content":"从而完成三次的get出发o"},{"from":3871.839,"to":3873.519,"location":2,"content":"那么这样的话呢"},{"from":3873.519,"to":3878.49,"location":2,"content":"咱们就把我们的proxy和reflect给大家说了一下"},{"from":3878.49,"to":3880.95,"location":2,"content":"代码呢可能逻辑上会有一些复杂"},{"from":3880.95,"to":3884.5,"location":2,"content":"所以说大家需要花一点时间去消化一下"},{"from":3884.899,"to":3888.139,"location":2,"content":"那么接下来呢我们来看一下这里的旧鞋换新"},{"from":3888.139,"to":3890.239,"location":2,"content":"如果说大家从事业务开发的话"},{"from":3890.239,"to":3894.15,"location":2,"content":"那么xy和reflect的使用场景其实并不是很多"},{"from":3894.15,"to":3897.63,"location":2,"content":"而如果说有一天你需要监听某个对象的"},{"from":3897.63,"to":3899.97,"location":2,"content":"get或者set的一个行为啦"},{"from":3899.97,"to":3904.87,"location":2,"content":"那么此时可以通过proxy配合reflect来进行完成"},{"from":3904.87,"to":3909.51,"location":2,"content":"ok那么接下来呢我们就来看一下第15章哈"},{"from":3909.51,"to":3910.77,"location":2,"content":"叫做正则表达式"},{"from":3910.77,"to":3912.33,"location":2,"content":"从第15章开始呢"},{"from":3912.33,"to":3914.67,"location":2,"content":"到后面都是一些零碎的概念了啊"},{"from":3914.67,"to":3917.08,"location":2,"content":"就相对而言会简单很多"},{"from":3917.08,"to":3919.88,"location":2,"content":"ok那我们来看"},{"from":3919.88,"to":3922.19,"location":2,"content":"首先呢嗯正则表达式哈"},{"from":3922.19,"to":3926.63,"location":2,"content":"呃基本上每一本关于javascript的书籍中"},{"from":3926.63,"to":3929.72,"location":2,"content":"都会包含一个正则表达式的环节"},{"from":3929.72,"to":3931.1,"location":2,"content":"但是呢讲道理哈"},{"from":3931.1,"to":3932.51,"location":2,"content":"在日常的开发之中"},{"from":3932.51,"to":3934.04,"location":2,"content":"正则表达式的使用"},{"from":3934.04,"to":3937.64,"location":2,"content":"是不足以让我们花费大量的时间来进行学习的"},{"from":3937.64,"to":3938.51,"location":2,"content":"同时"},{"from":3938.51,"to":3940.13,"location":2,"content":"书里面的这些内容呢"},{"from":3940.13,"to":3945.1,"location":2,"content":"也不足以支撑复杂场景下的正则表达式的用法"},{"from":3945.279,"to":3947.679,"location":2,"content":"所以说在本书的第15章里面呢"},{"from":3947.679,"to":3952.269,"location":2,"content":"我摘抄出了三个新增的正则标记符"},{"from":3952.269,"to":3954.84,"location":2,"content":"ok给大家进行一下参考就可以了"},{"from":3955,"to":3957.19,"location":2,"content":"然后接下来呢是第16章啊"},{"from":3957.19,"to":3959.29,"location":2,"content":"作者在书中说到呃"},{"from":3959.29,"to":3961.93,"location":2,"content":"绝大多数的开发者并不需要"},{"from":3961.93,"to":3964.47,"location":2,"content":"在线程之间共享内存"},{"from":3964.47,"to":3966.27,"location":2,"content":"ok作者其实说的很对啊"},{"from":3966.27,"to":3969.51,"location":2,"content":"所以说我们在这里呢不会花费篇章来说"},{"from":3969.51,"to":3970.26,"location":2,"content":"这个问题"},{"from":3970.26,"to":3972.63,"location":2,"content":"如果你需要共享内存的话"},{"from":3972.63,"to":3975.36,"location":2,"content":"那么可以看一下书中讲解的内容"},{"from":3976.2,"to":3977.69,"location":2,"content":"然后第17章啊"},{"from":3977.69,"to":3978.63,"location":2,"content":"其他特性"},{"from":3978.63,"to":3981.9,"location":2,"content":"这个其他特性这里面其实东西就非常多了"},{"from":3981.9,"to":3987.16,"location":2,"content":"它主要呈现了一些单一的不成系统的一些特性"},{"from":3987.16,"to":3990.1,"location":2,"content":"而这些特性呢虽然大多数比较简单"},{"from":3990.1,"to":3993.96,"location":2,"content":"但是呢有些在日常开发中还是比较有用的"},{"from":3994.1,"to":3996.5,"location":2,"content":"我从第17章这里呢抽出来了"},{"from":3996.5,"to":3999.32,"location":2,"content":"对我们日常开发有价值的特性"},{"from":3999.32,"to":4000.68,"location":2,"content":"我们一起来看一下"},{"from":4000.879,"to":4003.99,"location":2,"content":"首先第一个是big big int呢"},{"from":4003.99,"to":4005.85,"location":2,"content":"它是用来处理大数字问题的"},{"from":4005.85,"to":4008.65,"location":2,"content":"我们知道js中存在大数字的问题"},{"from":4008.65,"to":4012.76,"location":2,"content":"一旦当数字大于二的53次方减一的时候"},{"from":4012.76,"to":4016.3,"location":2,"content":"那么此时这个数值表现的会不准确"},{"from":4016.5,"to":4018.72,"location":2,"content":"所以说呢e s u之后呢"},{"from":4018.72,"to":4020.28,"location":2,"content":"它提供了一个b int"},{"from":4020.28,"to":4024.9,"location":2,"content":"我们可以直接在大数字后面加上一个n"},{"from":4025.08,"to":4026.46,"location":2,"content":"加上n之后呢"},{"from":4026.46,"to":4028.62,"location":2,"content":"就表示它是一个big int"},{"from":4028.62,"to":4032.84,"location":2,"content":"那么这个时候数字就会通过一个"},{"from":4032.84,"to":4035.07,"location":2,"content":"正确的形式去进行存储"},{"from":4035.07,"to":4039.69,"location":2,"content":"我们就可以通过当前的这个对象的点to string方法"},{"from":4039.69,"to":4043.12,"location":2,"content":"来获取到正确的数值啊"},{"from":4043.12,"to":4043.48,"location":2,"content":"当然了"},{"from":4043.48,"to":4047.14,"location":2,"content":"这个数值现在已经被转成字符串了对吧"},{"from":4047.14,"to":4048.85,"location":2,"content":"这是一个语法糖好吧"},{"from":4048.85,"to":4052.3,"location":2,"content":"然后接下来第二个呢是二进制和八进制"},{"from":4052.3,"to":4056.92,"location":2,"content":"ok呃我们可以通过ob的形式来去标记二进制"},{"from":4056.92,"to":4059.14,"location":2,"content":"比如说ob 1000啊"},{"from":4059.14,"to":4059.8,"location":2,"content":"转成十进制"},{"from":4059.8,"to":4060.52,"location":2,"content":"就是八"},{"from":4060.54,"to":4063.54,"location":2,"content":"可以通过呃零哈0b哈"},{"from":4063.54,"to":4067.43,"location":2,"content":"也可以通过0o的形式去表示八进制"},{"from":4067.43,"to":4071.8,"location":2,"content":"ok比如说0o17 代表的十进制是15"},{"from":4072.16,"to":4075.31,"location":2,"content":"然后呢是我们的呃catch哈"},{"from":4075.31,"to":4078.48,"location":2,"content":"呃try catch的一个使用之前的时候"},{"from":4078.48,"to":4080.04,"location":2,"content":"去使用catch的时候呢"},{"from":4080.04,"to":4083.52,"location":2,"content":"我们必须要加个小括号里面写一个变量名啊"},{"from":4083.52,"to":4085.44,"location":2,"content":"但是现在呢他把这块省略掉了"},{"from":4085.44,"to":4087.46,"location":2,"content":"一个是可以直接拆开"},{"from":4088.14,"to":4091.37,"location":2,"content":"然后再往下是新增的一些max方法"},{"from":4091.37,"to":4092.9,"location":2,"content":"这些方法呢就不去说了"},{"from":4092.9,"to":4094.44,"location":2,"content":"大家可以自己去看一下"},{"from":4094.54,"to":4096.76,"location":2,"content":"然后是群密运算"},{"from":4096.76,"to":4097.24,"location":2,"content":"ok"},{"from":4097.24,"to":4099.7,"location":2,"content":"比如说我们可以通过两个乘号来对"},{"from":4099.7,"to":4101.62,"location":2,"content":"二取三次方啊"},{"from":4101.62,"to":4103.12,"location":2,"content":"这表示2x2x2"},{"from":4103.12,"to":4104.4,"location":2,"content":"最后的结果是八"},{"from":4104.74,"to":4106.72,"location":2,"content":"然后还有空值合并"},{"from":4106.72,"to":4109.42,"location":2,"content":"空值合并呢其实是一个很有用的一个特性"},{"from":4109.42,"to":4111.639,"location":2,"content":"那么这个空值合并是干什么的呢"},{"from":4111.639,"to":4114.159,"location":2,"content":"那比如说我们先来看这块代码"},{"from":4114.159,"to":4115.719,"location":2,"content":"在这块代码之中呢"},{"from":4115.719,"to":4117.909,"location":2,"content":"number是一个零对吧"},{"from":4117.909,"to":4121.509,"location":2,"content":"那么我们利用逻辑或的逻辑中断特性"},{"from":4121.509,"to":4123.519,"location":2,"content":"最终得到的值会是300"},{"from":4123.519,"to":4127.01,"location":2,"content":"因为零在js之中会被当"},{"from":4127.01,"to":4130.39,"location":2,"content":"js的逻辑判断里面会被当作假来看"},{"from":4130.39,"to":4132.43,"location":2,"content":"但是在实际开发之中呢"},{"from":4132.43,"to":4136.98,"location":2,"content":"有些时候零代表的是一个有意义的数值"},{"from":4137.139,"to":4138.17,"location":2,"content":"对不对"},{"from":4138.17,"to":4140.12,"location":2,"content":"所以说呢在上面的特性"},{"from":4140.12,"to":4141.98,"location":2,"content":"在上面的这个代码里面"},{"from":4141.98,"to":4143.93,"location":2,"content":"如果零是有意义的"},{"from":4143.93,"to":4146.74,"location":2,"content":"那么此时这个代码就会出现错误"},{"from":4146.92,"to":4147.88,"location":2,"content":"ok"},{"from":4147.88,"to":4150.34,"location":2,"content":"那么这个时候我们就可以使用到"},{"from":4150.34,"to":4152.32,"location":2,"content":"空值合并的概念啊"},{"from":4152.32,"to":4153.78,"location":2,"content":"叫做两个问号"},{"from":4153.78,"to":4157.95,"location":2,"content":"我们可以通过两个问号来去完成空值的合并"},{"from":4157.95,"to":4160.02,"location":2,"content":"在两个问号的情况之下"},{"from":4160.02,"to":4162.899,"location":2,"content":"只有问号前面的这个值是空"},{"from":4162.899,"to":4164.999,"location":2,"content":"或者undefined的时候"},{"from":4164.999,"to":4167.12,"location":2,"content":"才被会认为是假"},{"from":4167.3,"to":4167.9,"location":2,"content":"哎"},{"from":4167.9,"to":4170.51,"location":2,"content":"所以说呢如果我们通过空值合并的概念"},{"from":4170.51,"to":4173.03,"location":2,"content":"那么当前的这个代码会返回零"},{"from":4173.03,"to":4175.7,"location":2,"content":"也就是得到有意义的值"},{"from":4177.219,"to":4179.849,"location":2,"content":"那么接下来呢叫做可选链啊"},{"from":4179.849,"to":4184.12,"location":2,"content":"可选链呢也是一个开发中非常常见的一个情况"},{"from":4184.12,"to":4185.8,"location":2,"content":"比如说我这里有一个对象"},{"from":4185.8,"to":4186.28,"location":2,"content":"percent"},{"from":4186.28,"to":4187.36,"location":2,"content":"percent里面有个属性"},{"from":4187.36,"to":4189.29,"location":2,"content":"name name的值是张三"},{"from":4189.29,"to":4193.31,"location":2,"content":"那么当我去获取percent.child their name的时候"},{"from":4193.31,"to":4195.17,"location":2,"content":"因为percent里面没有child"},{"from":4195.17,"to":4197.22,"location":2,"content":"所以他会给我们抛出一个错误"},{"from":4197.32,"to":4200.8,"location":2,"content":"ok那么如果说想要避免这种错误的出现"},{"from":4200.8,"to":4203.23,"location":2,"content":"我们就可以利用可选链的一个特性"},{"from":4203.23,"to":4205.88,"location":2,"content":"让percent.child的问号"},{"from":4205.9,"to":4208.9,"location":2,"content":"那么一旦使用了这个问号的话"},{"from":4208.9,"to":4212.86,"location":2,"content":"问号前面的这个child一旦是空或者find"},{"from":4212.86,"to":4217.92,"location":2,"content":"那么这段代码就会进行逻辑短路对吧"},{"from":4217.92,"to":4219.24,"location":2,"content":"那么逻辑短路之后呢"},{"from":4219.24,"to":4221.28,"location":2,"content":"后面的这个点name就不会计算了"},{"from":4221.28,"to":4222.63,"location":2,"content":"从而得到一个find"},{"from":4222.63,"to":4225.48,"location":2,"content":"那么这样就可以避免我们的程序出错"},{"from":4225.54,"to":4228.8,"location":2,"content":"ok这在我们的日常开发中是非常常见的"},{"from":4229.179,"to":4230.259,"location":2,"content":"ok吧"},{"from":4230.259,"to":4234.579,"location":2,"content":"那么最后呢就是第18章和第19章哈"},{"from":4234.579,"to":4238.99,"location":2,"content":"这两章呢主要呃描述了未来的一些东西"},{"from":4238.99,"to":4242,"location":2,"content":"所以说对我们现在而言意义不大"},{"from":4242.099,"to":4246.119,"location":2,"content":"它里面很多的功能并不支持啊"},{"from":4246.119,"to":4247.649,"location":2,"content":"对于我们现在的浏览器来说"},{"from":4247.649,"to":4250.18,"location":2,"content":"里面的很多功能呢是不支持的"},{"from":4250.18,"to":4255.12,"location":2,"content":"并且呢实际开发中使用场景也是非常有限的"},{"from":4255.58,"to":4259.09,"location":2,"content":"如果说你对这两章的东西比较感兴趣的话呢"},{"from":4259.09,"to":4262.06,"location":2,"content":"那么可以到书中去看一下这两章的内容"},{"from":4262.06,"to":4264.94,"location":2,"content":"否则意义不是很大"},{"from":4267.7,"to":4269.82,"location":2,"content":"ok那么到这儿呢"},{"from":4269.82,"to":4274.26,"location":2,"content":"咱们整个的深入理解现代javascript的一个重点内容啊"},{"from":4274.26,"to":4275.86,"location":2,"content":"咱们就已经全部说完了"},{"from":4275.86,"to":4280.06,"location":2,"content":"有些小伙伴可能会拿javascript高级程序设计"},{"from":4280.06,"to":4285.42,"location":2,"content":"也就是红宝书来和我们这里呢所说的这本书哈"},{"from":4285.42,"to":4287.5,"location":2,"content":"去进行一个对比呃"},{"from":4287.5,"to":4289.18,"location":2,"content":"对于红宝书来说的话呢"},{"from":4289.18,"to":4291.28,"location":2,"content":"它是一个前端的经典书籍"},{"from":4291.28,"to":4292.74,"location":2,"content":"是非常值得阅读的"},{"from":4292.74,"to":4294.48,"location":2,"content":"但是呢在现在看来"},{"from":4294.48,"to":4297.36,"location":2,"content":"它里面的很多内容其实会有一些落后"},{"from":4297.36,"to":4303.12,"location":2,"content":"如果说在红宝书和深入理解现代javascript"},{"from":4303.12,"to":4305.31,"location":2,"content":"直接进行一个二选一的话"},{"from":4305.31,"to":4308.46,"location":2,"content":"那么我个人建议哈大家去看一下这本哈"},{"from":4308.46,"to":4311.43,"location":2,"content":"也就是深入理解现代javascript"},{"from":4311.43,"to":4312.27,"location":2,"content":"好吧"},{"from":4312.27,"to":4313.29,"location":2,"content":"我是sunday啊"},{"from":4313.29,"to":4314.79,"location":2,"content":"关注我不迷路哈"},{"from":4314.79,"to":4315.81,"location":2,"content":"和大家一起读书"},{"from":4315.81,"to":4318,"location":2,"content":"一起去分享技术知识"},{"from":4318,"to":4318.6,"location":2,"content":"拜拜"}]}